
TIMER_UART_SLEEPONEXIT_LOW_POWER_MODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a04  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001b9c  08001b9c  00011b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ba4  08001ba4  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08001ba4  08001ba4  00011ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001bac  08001bac  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bac  08001bac  00011bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bb0  08001bb0  00011bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08001bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000002c  08001be0  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08001be0  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c861  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ed  00000000  00000000  0002c8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  0002e1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00015eec  00000000  00000000  0002ecd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000caa3  00000000  00000000  00044bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008ca7f  00000000  00000000  00051667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000de0e6  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000a88  00000000  00000000  000de138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ed0  00000000  00000000  000debc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001b84 	.word	0x08001b84

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	08001b84 	.word	0x08001b84

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <SysTick_Handler>:
#include "main.h"

extern TIM_HandleTypeDef htimer10;

void SysTick_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004f0:	f000 f9dc 	bl	80008ac <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004f4:	f000 fb0b 	bl	8000b0e <HAL_SYSTICK_IRQHandler>
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler()
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000500:	2201      	movs	r2, #1
 8000502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8000508:	f000 fc92 	bl	8000e30 <HAL_GPIO_WritePin>
	HAL_TIM_IRQHandler(&htimer10);
 800050c:	4806      	ldr	r0, [pc, #24]	; (8000528 <TIM1_UP_TIM10_IRQHandler+0x2c>)
 800050e:	f000 fd8f 	bl	8001030 <HAL_TIM_IRQHandler>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000518:	4802      	ldr	r0, [pc, #8]	; (8000524 <TIM1_UP_TIM10_IRQHandler+0x28>)
 800051a:	f000 fc89 	bl	8000e30 <HAL_GPIO_WritePin>
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40020c00 	.word	0x40020c00
 8000528:	20000048 	.word	0x20000048

0800052c <main>:
UART_HandleTypeDef huart2;
extern uint8_t somedata[];


int main()
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000530:	f000 f96a 	bl	8000808 <HAL_Init>
	GPIO_Init();
 8000534:	f000 f818 	bl	8000568 <GPIO_Init>
	UART2_Init();
 8000538:	f000 f85a 	bl	80005f0 <UART2_Init>
	TIMER10_Init();
 800053c:	f000 f83a 	bl	80005b4 <TIMER10_Init>


	//enable sleep on exit
	SCB->SCR |= (1 << 1);
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <main+0x30>)
 8000542:	691b      	ldr	r3, [r3, #16]
 8000544:	4a05      	ldr	r2, [pc, #20]	; (800055c <main+0x30>)
 8000546:	f043 0302 	orr.w	r3, r3, #2
 800054a:	6113      	str	r3, [r2, #16]

	TIM10->SR = 0; //clc
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <main+0x34>)
 800054e:	2200      	movs	r2, #0
 8000550:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htimer10);
 8000552:	4804      	ldr	r0, [pc, #16]	; (8000564 <main+0x38>)
 8000554:	f000 fd0a 	bl	8000f6c <HAL_TIM_Base_Start_IT>


	while(1);
 8000558:	e7fe      	b.n	8000558 <main+0x2c>
 800055a:	bf00      	nop
 800055c:	e000ed00 	.word	0xe000ed00
 8000560:	40014400 	.word	0x40014400
 8000564:	20000048 	.word	0x20000048

08000568 <GPIO_Init>:
}



void GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	603b      	str	r3, [r7, #0]
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <GPIO_Init+0x44>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <GPIO_Init+0x44>)
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <GPIO_Init+0x44>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0308 	and.w	r3, r3, #8
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_12;
 800058a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800058e:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	2301      	movs	r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD,&ledgpio);
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	4619      	mov	r1, r3
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <GPIO_Init+0x48>)
 800059e:	f000 fac3 	bl	8000b28 <HAL_GPIO_Init>
}
 80005a2:	bf00      	nop
 80005a4:	3718      	adds	r7, #24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40020c00 	.word	0x40020c00

080005b4 <TIMER10_Init>:

void TIMER10_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	htimer10.Instance = TIM10;
 80005b8:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <TIMER10_Init+0x34>)
 80005ba:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <TIMER10_Init+0x38>)
 80005bc:	601a      	str	r2, [r3, #0]
	htimer10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <TIMER10_Init+0x34>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
	htimer10.Init.Prescaler = 24;
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <TIMER10_Init+0x34>)
 80005c6:	2218      	movs	r2, #24
 80005c8:	605a      	str	r2, [r3, #4]
	htimer10.Init.Period = 64000-1;
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <TIMER10_Init+0x34>)
 80005cc:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80005d0:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&htimer10) != HAL_OK)
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <TIMER10_Init+0x34>)
 80005d4:	f000 fc7a 	bl	8000ecc <HAL_TIM_Base_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <TIMER10_Init+0x2e>
	{
		Error_Handler();
 80005de:	f000 f849 	bl	8000674 <Error_Handler>
	}
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000048 	.word	0x20000048
 80005ec:	40014400 	.word	0x40014400

080005f0 <UART2_Init>:

void UART2_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <UART2_Init+0x44>)
 80005f6:	4a10      	ldr	r2, [pc, #64]	; (8000638 <UART2_Init+0x48>)
 80005f8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <UART2_Init+0x44>)
 80005fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000600:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <UART2_Init+0x44>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <UART2_Init+0x44>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <UART2_Init+0x44>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <UART2_Init+0x44>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <UART2_Init+0x44>)
 800061c:	220c      	movs	r2, #12
 800061e:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <UART2_Init+0x44>)
 8000622:	f000 fec9 	bl	80013b8 <HAL_UART_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <UART2_Init+0x40>
	{
		Error_Handler();
 800062c:	f000 f822 	bl	8000674 <Error_Handler>
	}
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000090 	.word	0x20000090
 8000638:	40004400 	.word	0x40004400

0800063c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	if(HAL_UART_Transmit(&huart2, (uint8_t*)somedata, (uint16_t)strlen((char*)somedata), HAL_MAX_DELAY) != HAL_OK)
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000646:	f7ff fdc7 	bl	80001d8 <strlen>
 800064a:	4603      	mov	r3, r0
 800064c:	b29a      	uxth	r2, r3
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	4906      	ldr	r1, [pc, #24]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000654:	4806      	ldr	r0, [pc, #24]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000656:	f000 fefc 	bl	8001452 <HAL_UART_Transmit>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		Error_Handler();
 8000660:	f000 f808 	bl	8000674 <Error_Handler>
	}
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000000 	.word	0x20000000
 8000670:	20000090 	.word	0x20000090

08000674 <Error_Handler>:

void Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
	while(1);
 8000678:	e7fe      	b.n	8000678 <Error_Handler+0x4>
	...

0800067c <HAL_MspInit>:

#include "main.h"


void HAL_MspInit(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	//Low level processor specific inits
	//1. Set up the priority grouping of the arm cortex Mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000680:	2003      	movs	r0, #3
 8000682:	f000 fa03 	bl	8000a8c <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the require system exceptions of the arm cortex Mx processor
	//system control block -> System handler control and state register
	SCB->SHCSR |= 0x7 << 16; //usage, bus, memory fault system exceptions
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <HAL_MspInit+0x40>)
 8000688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068a:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <HAL_MspInit+0x40>)
 800068c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000690:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	f06f 000b 	mvn.w	r0, #11
 800069a:	f000 fa02 	bl	8000aa2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	f06f 000a 	mvn.w	r0, #10
 80006a6:	f000 f9fc 	bl	8000aa2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	f06f 0009 	mvn.w	r0, #9
 80006b2:	f000 f9f6 	bl	8000aa2 <HAL_NVIC_SetPriority>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	//1. Enable the clock for timer 10 peripheral
	__HAL_RCC_TIM10_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <HAL_TIM_Base_MspInit+0x3c>)
 80006ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d0:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <HAL_TIM_Base_MspInit+0x3c>)
 80006d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d6:	6453      	str	r3, [r2, #68]	; 0x44
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <HAL_TIM_Base_MspInit+0x3c>)
 80006da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of timer 10
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80006e4:	2019      	movs	r0, #25
 80006e6:	f000 f9f8 	bl	8000ada <HAL_NVIC_EnableIRQ>

	//3. set up priority
	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	210f      	movs	r1, #15
 80006ee:	2019      	movs	r0, #25
 80006f0:	f000 f9d7 	bl	8000aa2 <HAL_NVIC_SetPriority>
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800

08000700 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *huart2)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;

	//Low level inits for UART2 Peripheral
	//1. Enable the clock for the UART2 and GPIO peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <HAL_UART_MspInit+0x88>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a1d      	ldr	r2, [pc, #116]	; (8000788 <HAL_UART_MspInit+0x88>)
 8000712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <HAL_UART_MspInit+0x88>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <HAL_UART_MspInit+0x88>)
 800072a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072c:	4a16      	ldr	r2, [pc, #88]	; (8000788 <HAL_UART_MspInit+0x88>)
 800072e:	f043 0301 	orr.w	r3, r3, #1
 8000732:	6313      	str	r3, [r2, #48]	; 0x30
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <HAL_UART_MspInit+0x88>)
 8000736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]
	//2. The pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; //UART2_TX
 8000740:	2304      	movs	r3, #4
 8000742:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8000748:	2301      	movs	r3, #1
 800074a:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FAST;
 800074c:	2302      	movs	r3, #2
 800074e:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 8000750:	2307      	movs	r3, #7
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4619      	mov	r1, r3
 800075a:	480c      	ldr	r0, [pc, #48]	; (800078c <HAL_UART_MspInit+0x8c>)
 800075c:	f000 f9e4 	bl	8000b28 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000760:	2308      	movs	r3, #8
 8000762:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	4808      	ldr	r0, [pc, #32]	; (800078c <HAL_UART_MspInit+0x8c>)
 800076c:	f000 f9dc 	bl	8000b28 <HAL_GPIO_Init>
	//3. Enable the IRQ and set up the priority (NVIC Settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000770:	2026      	movs	r0, #38	; 0x26
 8000772:	f000 f9b2 	bl	8000ada <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	210f      	movs	r1, #15
 800077a:	2026      	movs	r0, #38	; 0x26
 800077c:	f000 f991 	bl	8000aa2 <HAL_NVIC_SetPriority>
}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	; 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000

08000790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <SystemInit+0x20>)
 8000796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <SystemInit+0x20>)
 800079c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007ba:	490e      	ldr	r1, [pc, #56]	; (80007f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007bc:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c0:	e002      	b.n	80007c8 <LoopCopyDataInit>

080007c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c6:	3304      	adds	r3, #4

080007c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007cc:	d3f9      	bcc.n	80007c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007d0:	4c0b      	ldr	r4, [pc, #44]	; (8000800 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d4:	e001      	b.n	80007da <LoopFillZerobss>

080007d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d8:	3204      	adds	r2, #4

080007da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007dc:	d3fb      	bcc.n	80007d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007de:	f7ff ffd7 	bl	8000790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007e2:	f001 f9ab 	bl	8001b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007e6:	f7ff fea1 	bl	800052c <main>
  bx  lr    
 80007ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80007f8:	08001bb4 	.word	0x08001bb4
  ldr r2, =_sbss
 80007fc:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000800:	200000d8 	.word	0x200000d8

08000804 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000804:	e7fe      	b.n	8000804 <ADC_IRQHandler>
	...

08000808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_Init+0x40>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <HAL_Init+0x40>)
 8000812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000816:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <HAL_Init+0x40>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <HAL_Init+0x40>)
 800081e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000822:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_Init+0x40>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a07      	ldr	r2, [pc, #28]	; (8000848 <HAL_Init+0x40>)
 800082a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800082e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000830:	2003      	movs	r0, #3
 8000832:	f000 f92b 	bl	8000a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000836:	2000      	movs	r0, #0
 8000838:	f000 f808 	bl	800084c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800083c:	f7ff ff1e 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023c00 	.word	0x40023c00

0800084c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_InitTick+0x54>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_InitTick+0x58>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	4619      	mov	r1, r3
 800085e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000862:	fbb3 f3f1 	udiv	r3, r3, r1
 8000866:	fbb2 f3f3 	udiv	r3, r2, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f943 	bl	8000af6 <HAL_SYSTICK_Config>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	e00e      	b.n	8000898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b0f      	cmp	r3, #15
 800087e:	d80a      	bhi.n	8000896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000880:	2200      	movs	r2, #0
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	f04f 30ff 	mov.w	r0, #4294967295
 8000888:	f000 f90b 	bl	8000aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800088c:	4a06      	ldr	r2, [pc, #24]	; (80008a8 <HAL_InitTick+0x5c>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000892:	2300      	movs	r3, #0
 8000894:	e000      	b.n	8000898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000896:	2301      	movs	r3, #1
}
 8000898:	4618      	mov	r0, r3
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000020 	.word	0x20000020
 80008a4:	20000028 	.word	0x20000028
 80008a8:	20000024 	.word	0x20000024

080008ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_IncTick+0x20>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_IncTick+0x24>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4413      	add	r3, r2
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <HAL_IncTick+0x24>)
 80008be:	6013      	str	r3, [r2, #0]
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	20000028 	.word	0x20000028
 80008d0:	200000d4 	.word	0x200000d4

080008d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return uwTick;
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <HAL_GetTick+0x14>)
 80008da:	681b      	ldr	r3, [r3, #0]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	200000d4 	.word	0x200000d4

080008ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000908:	4013      	ands	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091e:	4a04      	ldr	r2, [pc, #16]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	60d3      	str	r3, [r2, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <__NVIC_GetPriorityGrouping+0x18>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	0a1b      	lsrs	r3, r3, #8
 800093e:	f003 0307 	and.w	r3, r3, #7
}
 8000942:	4618      	mov	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	2b00      	cmp	r3, #0
 8000960:	db0b      	blt.n	800097a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	f003 021f 	and.w	r2, r3, #31
 8000968:	4907      	ldr	r1, [pc, #28]	; (8000988 <__NVIC_EnableIRQ+0x38>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	095b      	lsrs	r3, r3, #5
 8000970:	2001      	movs	r0, #1
 8000972:	fa00 f202 	lsl.w	r2, r0, r2
 8000976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000e100 	.word	0xe000e100

0800098c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	db0a      	blt.n	80009b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	490c      	ldr	r1, [pc, #48]	; (80009d8 <__NVIC_SetPriority+0x4c>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	0112      	lsls	r2, r2, #4
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	440b      	add	r3, r1
 80009b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b4:	e00a      	b.n	80009cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4908      	ldr	r1, [pc, #32]	; (80009dc <__NVIC_SetPriority+0x50>)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	3b04      	subs	r3, #4
 80009c4:	0112      	lsls	r2, r2, #4
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	440b      	add	r3, r1
 80009ca:	761a      	strb	r2, [r3, #24]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000e100 	.word	0xe000e100
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	f1c3 0307 	rsb	r3, r3, #7
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	bf28      	it	cs
 80009fe:	2304      	movcs	r3, #4
 8000a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3304      	adds	r3, #4
 8000a06:	2b06      	cmp	r3, #6
 8000a08:	d902      	bls.n	8000a10 <NVIC_EncodePriority+0x30>
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3b03      	subs	r3, #3
 8000a0e:	e000      	b.n	8000a12 <NVIC_EncodePriority+0x32>
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	f04f 32ff 	mov.w	r2, #4294967295
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43da      	mvns	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	401a      	ands	r2, r3
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a28:	f04f 31ff 	mov.w	r1, #4294967295
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	43d9      	mvns	r1, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	4313      	orrs	r3, r2
         );
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3724      	adds	r7, #36	; 0x24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a58:	d301      	bcc.n	8000a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00f      	b.n	8000a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <SysTick_Config+0x40>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a66:	210f      	movs	r1, #15
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f7ff ff8e 	bl	800098c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SysTick_Config+0x40>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <SysTick_Config+0x40>)
 8000a78:	2207      	movs	r2, #7
 8000a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	e000e010 	.word	0xe000e010

08000a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ff29 	bl	80008ec <__NVIC_SetPriorityGrouping>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab4:	f7ff ff3e 	bl	8000934 <__NVIC_GetPriorityGrouping>
 8000ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	6978      	ldr	r0, [r7, #20]
 8000ac0:	f7ff ff8e 	bl	80009e0 <NVIC_EncodePriority>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff5d 	bl	800098c <__NVIC_SetPriority>
}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff31 	bl	8000950 <__NVIC_EnableIRQ>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff ffa2 	bl	8000a48 <SysTick_Config>
 8000b04:	4603      	mov	r3, r0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000b12:	f000 f802 	bl	8000b1a <HAL_SYSTICK_Callback>
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b089      	sub	sp, #36	; 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
 8000b42:	e159      	b.n	8000df8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b44:	2201      	movs	r2, #1
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	f040 8148 	bne.w	8000df2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f003 0303 	and.w	r3, r3, #3
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d005      	beq.n	8000b7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d130      	bne.n	8000bdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	2203      	movs	r2, #3
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	68da      	ldr	r2, [r3, #12]
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	091b      	lsrs	r3, r3, #4
 8000bc6:	f003 0201 	and.w	r2, r3, #1
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f003 0303 	and.w	r3, r3, #3
 8000be4:	2b03      	cmp	r3, #3
 8000be6:	d017      	beq.n	8000c18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	689a      	ldr	r2, [r3, #8]
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d123      	bne.n	8000c6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	08da      	lsrs	r2, r3, #3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3208      	adds	r2, #8
 8000c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	f003 0307 	and.w	r3, r3, #7
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	220f      	movs	r2, #15
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4013      	ands	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	691a      	ldr	r2, [r3, #16]
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	08da      	lsrs	r2, r3, #3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3208      	adds	r2, #8
 8000c66:	69b9      	ldr	r1, [r7, #24]
 8000c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	2203      	movs	r2, #3
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4013      	ands	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0203 	and.w	r2, r3, #3
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f000 80a2 	beq.w	8000df2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b57      	ldr	r3, [pc, #348]	; (8000e10 <HAL_GPIO_Init+0x2e8>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a56      	ldr	r2, [pc, #344]	; (8000e10 <HAL_GPIO_Init+0x2e8>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b54      	ldr	r3, [pc, #336]	; (8000e10 <HAL_GPIO_Init+0x2e8>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cca:	4a52      	ldr	r2, [pc, #328]	; (8000e14 <HAL_GPIO_Init+0x2ec>)
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	220f      	movs	r2, #15
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4013      	ands	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a49      	ldr	r2, [pc, #292]	; (8000e18 <HAL_GPIO_Init+0x2f0>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d019      	beq.n	8000d2a <HAL_GPIO_Init+0x202>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a48      	ldr	r2, [pc, #288]	; (8000e1c <HAL_GPIO_Init+0x2f4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d013      	beq.n	8000d26 <HAL_GPIO_Init+0x1fe>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a47      	ldr	r2, [pc, #284]	; (8000e20 <HAL_GPIO_Init+0x2f8>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d00d      	beq.n	8000d22 <HAL_GPIO_Init+0x1fa>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a46      	ldr	r2, [pc, #280]	; (8000e24 <HAL_GPIO_Init+0x2fc>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d007      	beq.n	8000d1e <HAL_GPIO_Init+0x1f6>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a45      	ldr	r2, [pc, #276]	; (8000e28 <HAL_GPIO_Init+0x300>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_GPIO_Init+0x1f2>
 8000d16:	2304      	movs	r3, #4
 8000d18:	e008      	b.n	8000d2c <HAL_GPIO_Init+0x204>
 8000d1a:	2307      	movs	r3, #7
 8000d1c:	e006      	b.n	8000d2c <HAL_GPIO_Init+0x204>
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e004      	b.n	8000d2c <HAL_GPIO_Init+0x204>
 8000d22:	2302      	movs	r3, #2
 8000d24:	e002      	b.n	8000d2c <HAL_GPIO_Init+0x204>
 8000d26:	2301      	movs	r3, #1
 8000d28:	e000      	b.n	8000d2c <HAL_GPIO_Init+0x204>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	69fa      	ldr	r2, [r7, #28]
 8000d2e:	f002 0203 	and.w	r2, r2, #3
 8000d32:	0092      	lsls	r2, r2, #2
 8000d34:	4093      	lsls	r3, r2
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d3c:	4935      	ldr	r1, [pc, #212]	; (8000e14 <HAL_GPIO_Init+0x2ec>)
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	089b      	lsrs	r3, r3, #2
 8000d42:	3302      	adds	r3, #2
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d4a:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <HAL_GPIO_Init+0x304>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4013      	ands	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d6e:	4a2f      	ldr	r2, [pc, #188]	; (8000e2c <HAL_GPIO_Init+0x304>)
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d74:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <HAL_GPIO_Init+0x304>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d98:	4a24      	ldr	r2, [pc, #144]	; (8000e2c <HAL_GPIO_Init+0x304>)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d9e:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <HAL_GPIO_Init+0x304>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	43db      	mvns	r3, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dc2:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <HAL_GPIO_Init+0x304>)
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_GPIO_Init+0x304>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d003      	beq.n	8000dec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dec:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <HAL_GPIO_Init+0x304>)
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3301      	adds	r3, #1
 8000df6:	61fb      	str	r3, [r7, #28]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	2b0f      	cmp	r3, #15
 8000dfc:	f67f aea2 	bls.w	8000b44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40013800 	.word	0x40013800
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	40020400 	.word	0x40020400
 8000e20:	40020800 	.word	0x40020800
 8000e24:	40020c00 	.word	0x40020c00
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40013c00 	.word	0x40013c00

08000e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	807b      	strh	r3, [r7, #2]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e40:	787b      	ldrb	r3, [r7, #1]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e46:	887a      	ldrh	r2, [r7, #2]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e4c:	e003      	b.n	8000e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	041a      	lsls	r2, r3, #16
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	619a      	str	r2, [r3, #24]
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000020 	.word	0x20000020

08000e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e80:	f7ff fff0 	bl	8000e64 <HAL_RCC_GetHCLKFreq>
 8000e84:	4602      	mov	r2, r0
 8000e86:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	0a9b      	lsrs	r3, r3, #10
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	4903      	ldr	r1, [pc, #12]	; (8000ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e92:	5ccb      	ldrb	r3, [r1, r3]
 8000e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	08001b9c 	.word	0x08001b9c

08000ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000ea8:	f7ff ffdc 	bl	8000e64 <HAL_RCC_GetHCLKFreq>
 8000eac:	4602      	mov	r2, r0
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	0b5b      	lsrs	r3, r3, #13
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	4903      	ldr	r1, [pc, #12]	; (8000ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000eba:	5ccb      	ldrb	r3, [r1, r3]
 8000ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	08001b9c 	.word	0x08001b9c

08000ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e041      	b.n	8000f62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d106      	bne.n	8000ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff fbe4 	bl	80006c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2202      	movs	r2, #2
 8000efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3304      	adds	r3, #4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	f000 f9c0 	bl	8001290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d001      	beq.n	8000f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e044      	b.n	800100e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2202      	movs	r2, #2
 8000f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f042 0201 	orr.w	r2, r2, #1
 8000f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a1e      	ldr	r2, [pc, #120]	; (800101c <HAL_TIM_Base_Start_IT+0xb0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d018      	beq.n	8000fd8 <HAL_TIM_Base_Start_IT+0x6c>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fae:	d013      	beq.n	8000fd8 <HAL_TIM_Base_Start_IT+0x6c>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a1a      	ldr	r2, [pc, #104]	; (8001020 <HAL_TIM_Base_Start_IT+0xb4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d00e      	beq.n	8000fd8 <HAL_TIM_Base_Start_IT+0x6c>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a19      	ldr	r2, [pc, #100]	; (8001024 <HAL_TIM_Base_Start_IT+0xb8>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d009      	beq.n	8000fd8 <HAL_TIM_Base_Start_IT+0x6c>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a17      	ldr	r2, [pc, #92]	; (8001028 <HAL_TIM_Base_Start_IT+0xbc>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d004      	beq.n	8000fd8 <HAL_TIM_Base_Start_IT+0x6c>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a16      	ldr	r2, [pc, #88]	; (800102c <HAL_TIM_Base_Start_IT+0xc0>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d111      	bne.n	8000ffc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d010      	beq.n	800100c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f042 0201 	orr.w	r2, r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000ffa:	e007      	b.n	800100c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0201 	orr.w	r2, r2, #1
 800100a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40010000 	.word	0x40010000
 8001020:	40000400 	.word	0x40000400
 8001024:	40000800 	.word	0x40000800
 8001028:	40000c00 	.word	0x40000c00
 800102c:	40014000 	.word	0x40014000

08001030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b02      	cmp	r3, #2
 8001044:	d122      	bne.n	800108c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b02      	cmp	r3, #2
 8001052:	d11b      	bne.n	800108c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f06f 0202 	mvn.w	r2, #2
 800105c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f8ee 	bl	8001254 <HAL_TIM_IC_CaptureCallback>
 8001078:	e005      	b.n	8001086 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f8e0 	bl	8001240 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 f8f1 	bl	8001268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	2b04      	cmp	r3, #4
 8001098:	d122      	bne.n	80010e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d11b      	bne.n	80010e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f06f 0204 	mvn.w	r2, #4
 80010b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2202      	movs	r2, #2
 80010b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f8c4 	bl	8001254 <HAL_TIM_IC_CaptureCallback>
 80010cc:	e005      	b.n	80010da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f8b6 	bl	8001240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 f8c7 	bl	8001268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	2b08      	cmp	r3, #8
 80010ec:	d122      	bne.n	8001134 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d11b      	bne.n	8001134 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f06f 0208 	mvn.w	r2, #8
 8001104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2204      	movs	r2, #4
 800110a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f89a 	bl	8001254 <HAL_TIM_IC_CaptureCallback>
 8001120:	e005      	b.n	800112e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f88c 	bl	8001240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f89d 	bl	8001268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	2b10      	cmp	r3, #16
 8001140:	d122      	bne.n	8001188 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	f003 0310 	and.w	r3, r3, #16
 800114c:	2b10      	cmp	r3, #16
 800114e:	d11b      	bne.n	8001188 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f06f 0210 	mvn.w	r2, #16
 8001158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2208      	movs	r2, #8
 800115e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f870 	bl	8001254 <HAL_TIM_IC_CaptureCallback>
 8001174:	e005      	b.n	8001182 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f862 	bl	8001240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 f873 	bl	8001268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b01      	cmp	r3, #1
 8001194:	d10e      	bne.n	80011b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d107      	bne.n	80011b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f06f 0201 	mvn.w	r2, #1
 80011ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fa44 	bl	800063c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011be:	2b80      	cmp	r3, #128	; 0x80
 80011c0:	d10e      	bne.n	80011e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011cc:	2b80      	cmp	r3, #128	; 0x80
 80011ce:	d107      	bne.n	80011e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80011d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f8e2 	bl	80013a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ea:	2b40      	cmp	r3, #64	; 0x40
 80011ec:	d10e      	bne.n	800120c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011f8:	2b40      	cmp	r3, #64	; 0x40
 80011fa:	d107      	bne.n	800120c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 f838 	bl	800127c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	f003 0320 	and.w	r3, r3, #32
 8001216:	2b20      	cmp	r3, #32
 8001218:	d10e      	bne.n	8001238 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	f003 0320 	and.w	r3, r3, #32
 8001224:	2b20      	cmp	r3, #32
 8001226:	d107      	bne.n	8001238 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f06f 0220 	mvn.w	r2, #32
 8001230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f8ac 	bl	8001390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a34      	ldr	r2, [pc, #208]	; (8001374 <TIM_Base_SetConfig+0xe4>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d00f      	beq.n	80012c8 <TIM_Base_SetConfig+0x38>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012ae:	d00b      	beq.n	80012c8 <TIM_Base_SetConfig+0x38>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a31      	ldr	r2, [pc, #196]	; (8001378 <TIM_Base_SetConfig+0xe8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d007      	beq.n	80012c8 <TIM_Base_SetConfig+0x38>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a30      	ldr	r2, [pc, #192]	; (800137c <TIM_Base_SetConfig+0xec>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d003      	beq.n	80012c8 <TIM_Base_SetConfig+0x38>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a2f      	ldr	r2, [pc, #188]	; (8001380 <TIM_Base_SetConfig+0xf0>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d108      	bne.n	80012da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a25      	ldr	r2, [pc, #148]	; (8001374 <TIM_Base_SetConfig+0xe4>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d01b      	beq.n	800131a <TIM_Base_SetConfig+0x8a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e8:	d017      	beq.n	800131a <TIM_Base_SetConfig+0x8a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a22      	ldr	r2, [pc, #136]	; (8001378 <TIM_Base_SetConfig+0xe8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <TIM_Base_SetConfig+0x8a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a21      	ldr	r2, [pc, #132]	; (800137c <TIM_Base_SetConfig+0xec>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00f      	beq.n	800131a <TIM_Base_SetConfig+0x8a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a20      	ldr	r2, [pc, #128]	; (8001380 <TIM_Base_SetConfig+0xf0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d00b      	beq.n	800131a <TIM_Base_SetConfig+0x8a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a1f      	ldr	r2, [pc, #124]	; (8001384 <TIM_Base_SetConfig+0xf4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d007      	beq.n	800131a <TIM_Base_SetConfig+0x8a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a1e      	ldr	r2, [pc, #120]	; (8001388 <TIM_Base_SetConfig+0xf8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d003      	beq.n	800131a <TIM_Base_SetConfig+0x8a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a1d      	ldr	r2, [pc, #116]	; (800138c <TIM_Base_SetConfig+0xfc>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d108      	bne.n	800132c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	4313      	orrs	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <TIM_Base_SetConfig+0xe4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d103      	bne.n	8001360 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	615a      	str	r2, [r3, #20]
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40010000 	.word	0x40010000
 8001378:	40000400 	.word	0x40000400
 800137c:	40000800 	.word	0x40000800
 8001380:	40000c00 	.word	0x40000c00
 8001384:	40014000 	.word	0x40014000
 8001388:	40014400 	.word	0x40014400
 800138c:	40014800 	.word	0x40014800

08001390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e03f      	b.n	800144a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d106      	bne.n	80013e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff f98e 	bl	8000700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2224      	movs	r2, #36	; 0x24
 80013e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 f929 	bl	8001654 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001410:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	695a      	ldr	r2, [r3, #20]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001420:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001430:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2220      	movs	r2, #32
 800143c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2220      	movs	r2, #32
 8001444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b08a      	sub	sp, #40	; 0x28
 8001456:	af02      	add	r7, sp, #8
 8001458:	60f8      	str	r0, [r7, #12]
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4613      	mov	r3, r2
 8001460:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b20      	cmp	r3, #32
 8001470:	d17c      	bne.n	800156c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <HAL_UART_Transmit+0x2c>
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e075      	b.n	800156e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <HAL_UART_Transmit+0x3e>
 800148c:	2302      	movs	r3, #2
 800148e:	e06e      	b.n	800156e <HAL_UART_Transmit+0x11c>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2221      	movs	r2, #33	; 0x21
 80014a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80014a6:	f7ff fa15 	bl	80008d4 <HAL_GetTick>
 80014aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	88fa      	ldrh	r2, [r7, #6]
 80014b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	88fa      	ldrh	r2, [r7, #6]
 80014b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014c0:	d108      	bne.n	80014d4 <HAL_UART_Transmit+0x82>
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d104      	bne.n	80014d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	e003      	b.n	80014dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80014e4:	e02a      	b.n	800153c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	2200      	movs	r2, #0
 80014ee:	2180      	movs	r1, #128	; 0x80
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 f840 	bl	8001576 <UART_WaitOnFlagUntilTimeout>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e036      	b.n	800156e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10b      	bne.n	800151e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001514:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	3302      	adds	r3, #2
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	e007      	b.n	800152e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	781a      	ldrb	r2, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	3301      	adds	r3, #1
 800152c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001532:	b29b      	uxth	r3, r3
 8001534:	3b01      	subs	r3, #1
 8001536:	b29a      	uxth	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001540:	b29b      	uxth	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1cf      	bne.n	80014e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2200      	movs	r2, #0
 800154e:	2140      	movs	r1, #64	; 0x40
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f000 f810 	bl	8001576 <UART_WaitOnFlagUntilTimeout>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e006      	b.n	800156e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2220      	movs	r2, #32
 8001564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	e000      	b.n	800156e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800156c:	2302      	movs	r3, #2
  }
}
 800156e:	4618      	mov	r0, r3
 8001570:	3720      	adds	r7, #32
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b090      	sub	sp, #64	; 0x40
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	4613      	mov	r3, r2
 8001584:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001586:	e050      	b.n	800162a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800158a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158e:	d04c      	beq.n	800162a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001592:	2b00      	cmp	r3, #0
 8001594:	d007      	beq.n	80015a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001596:	f7ff f99d 	bl	80008d4 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d241      	bcs.n	800162a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	330c      	adds	r3, #12
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b0:	e853 3f00 	ldrex	r3, [r3]
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80015bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	330c      	adds	r3, #12
 80015c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015c6:	637a      	str	r2, [r7, #52]	; 0x34
 80015c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015ce:	e841 2300 	strex	r3, r2, [r1]
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80015d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1e5      	bne.n	80015a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3314      	adds	r3, #20
 80015e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	e853 3f00 	ldrex	r3, [r3]
 80015e8:	613b      	str	r3, [r7, #16]
   return(result);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3314      	adds	r3, #20
 80015f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015fa:	623a      	str	r2, [r7, #32]
 80015fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015fe:	69f9      	ldr	r1, [r7, #28]
 8001600:	6a3a      	ldr	r2, [r7, #32]
 8001602:	e841 2300 	strex	r3, r2, [r1]
 8001606:	61bb      	str	r3, [r7, #24]
   return(result);
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1e5      	bne.n	80015da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2220      	movs	r2, #32
 8001612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2220      	movs	r2, #32
 800161a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e00f      	b.n	800164a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4013      	ands	r3, r2
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	429a      	cmp	r2, r3
 8001638:	bf0c      	ite	eq
 800163a:	2301      	moveq	r3, #1
 800163c:	2300      	movne	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461a      	mov	r2, r3
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	429a      	cmp	r2, r3
 8001646:	d09f      	beq.n	8001588 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3740      	adds	r7, #64	; 0x40
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001658:	b0c0      	sub	sp, #256	; 0x100
 800165a:	af00      	add	r7, sp, #0
 800165c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800166c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001670:	68d9      	ldr	r1, [r3, #12]
 8001672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	ea40 0301 	orr.w	r3, r0, r1
 800167c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800167e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	431a      	orrs	r2, r3
 800168c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	431a      	orrs	r2, r3
 8001694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	4313      	orrs	r3, r2
 800169c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80016a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80016ac:	f021 010c 	bic.w	r1, r1, #12
 80016b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80016ba:	430b      	orrs	r3, r1
 80016bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80016ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016ce:	6999      	ldr	r1, [r3, #24]
 80016d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	ea40 0301 	orr.w	r3, r0, r1
 80016da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80016dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b8f      	ldr	r3, [pc, #572]	; (8001920 <UART_SetConfig+0x2cc>)
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d005      	beq.n	80016f4 <UART_SetConfig+0xa0>
 80016e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	4b8d      	ldr	r3, [pc, #564]	; (8001924 <UART_SetConfig+0x2d0>)
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d104      	bne.n	80016fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80016f4:	f7ff fbd6 	bl	8000ea4 <HAL_RCC_GetPCLK2Freq>
 80016f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80016fc:	e003      	b.n	8001706 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80016fe:	f7ff fbbd 	bl	8000e7c <HAL_RCC_GetPCLK1Freq>
 8001702:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001710:	f040 810c 	bne.w	800192c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001718:	2200      	movs	r2, #0
 800171a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800171e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001722:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001726:	4622      	mov	r2, r4
 8001728:	462b      	mov	r3, r5
 800172a:	1891      	adds	r1, r2, r2
 800172c:	65b9      	str	r1, [r7, #88]	; 0x58
 800172e:	415b      	adcs	r3, r3
 8001730:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001732:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001736:	4621      	mov	r1, r4
 8001738:	eb12 0801 	adds.w	r8, r2, r1
 800173c:	4629      	mov	r1, r5
 800173e:	eb43 0901 	adc.w	r9, r3, r1
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800174e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001752:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001756:	4690      	mov	r8, r2
 8001758:	4699      	mov	r9, r3
 800175a:	4623      	mov	r3, r4
 800175c:	eb18 0303 	adds.w	r3, r8, r3
 8001760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001764:	462b      	mov	r3, r5
 8001766:	eb49 0303 	adc.w	r3, r9, r3
 800176a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800176e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800177a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800177e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001782:	460b      	mov	r3, r1
 8001784:	18db      	adds	r3, r3, r3
 8001786:	653b      	str	r3, [r7, #80]	; 0x50
 8001788:	4613      	mov	r3, r2
 800178a:	eb42 0303 	adc.w	r3, r2, r3
 800178e:	657b      	str	r3, [r7, #84]	; 0x54
 8001790:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001794:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001798:	f7fe fd26 	bl	80001e8 <__aeabi_uldivmod>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4b61      	ldr	r3, [pc, #388]	; (8001928 <UART_SetConfig+0x2d4>)
 80017a2:	fba3 2302 	umull	r2, r3, r3, r2
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	011c      	lsls	r4, r3, #4
 80017aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80017ae:	2200      	movs	r2, #0
 80017b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80017b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80017b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80017bc:	4642      	mov	r2, r8
 80017be:	464b      	mov	r3, r9
 80017c0:	1891      	adds	r1, r2, r2
 80017c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80017c4:	415b      	adcs	r3, r3
 80017c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017cc:	4641      	mov	r1, r8
 80017ce:	eb12 0a01 	adds.w	sl, r2, r1
 80017d2:	4649      	mov	r1, r9
 80017d4:	eb43 0b01 	adc.w	fp, r3, r1
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017ec:	4692      	mov	sl, r2
 80017ee:	469b      	mov	fp, r3
 80017f0:	4643      	mov	r3, r8
 80017f2:	eb1a 0303 	adds.w	r3, sl, r3
 80017f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80017fa:	464b      	mov	r3, r9
 80017fc:	eb4b 0303 	adc.w	r3, fp, r3
 8001800:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001810:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001814:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001818:	460b      	mov	r3, r1
 800181a:	18db      	adds	r3, r3, r3
 800181c:	643b      	str	r3, [r7, #64]	; 0x40
 800181e:	4613      	mov	r3, r2
 8001820:	eb42 0303 	adc.w	r3, r2, r3
 8001824:	647b      	str	r3, [r7, #68]	; 0x44
 8001826:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800182a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800182e:	f7fe fcdb 	bl	80001e8 <__aeabi_uldivmod>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4611      	mov	r1, r2
 8001838:	4b3b      	ldr	r3, [pc, #236]	; (8001928 <UART_SetConfig+0x2d4>)
 800183a:	fba3 2301 	umull	r2, r3, r3, r1
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	2264      	movs	r2, #100	; 0x64
 8001842:	fb02 f303 	mul.w	r3, r2, r3
 8001846:	1acb      	subs	r3, r1, r3
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800184e:	4b36      	ldr	r3, [pc, #216]	; (8001928 <UART_SetConfig+0x2d4>)
 8001850:	fba3 2302 	umull	r2, r3, r3, r2
 8001854:	095b      	lsrs	r3, r3, #5
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800185c:	441c      	add	r4, r3
 800185e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001862:	2200      	movs	r2, #0
 8001864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001868:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800186c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001870:	4642      	mov	r2, r8
 8001872:	464b      	mov	r3, r9
 8001874:	1891      	adds	r1, r2, r2
 8001876:	63b9      	str	r1, [r7, #56]	; 0x38
 8001878:	415b      	adcs	r3, r3
 800187a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800187c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001880:	4641      	mov	r1, r8
 8001882:	1851      	adds	r1, r2, r1
 8001884:	6339      	str	r1, [r7, #48]	; 0x30
 8001886:	4649      	mov	r1, r9
 8001888:	414b      	adcs	r3, r1
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001898:	4659      	mov	r1, fp
 800189a:	00cb      	lsls	r3, r1, #3
 800189c:	4651      	mov	r1, sl
 800189e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018a2:	4651      	mov	r1, sl
 80018a4:	00ca      	lsls	r2, r1, #3
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	4642      	mov	r2, r8
 80018ae:	189b      	adds	r3, r3, r2
 80018b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80018b4:	464b      	mov	r3, r9
 80018b6:	460a      	mov	r2, r1
 80018b8:	eb42 0303 	adc.w	r3, r2, r3
 80018bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80018cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80018d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80018d4:	460b      	mov	r3, r1
 80018d6:	18db      	adds	r3, r3, r3
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80018da:	4613      	mov	r3, r2
 80018dc:	eb42 0303 	adc.w	r3, r2, r3
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80018ea:	f7fe fc7d 	bl	80001e8 <__aeabi_uldivmod>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <UART_SetConfig+0x2d4>)
 80018f4:	fba3 1302 	umull	r1, r3, r3, r2
 80018f8:	095b      	lsrs	r3, r3, #5
 80018fa:	2164      	movs	r1, #100	; 0x64
 80018fc:	fb01 f303 	mul.w	r3, r1, r3
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	3332      	adds	r3, #50	; 0x32
 8001906:	4a08      	ldr	r2, [pc, #32]	; (8001928 <UART_SetConfig+0x2d4>)
 8001908:	fba2 2303 	umull	r2, r3, r2, r3
 800190c:	095b      	lsrs	r3, r3, #5
 800190e:	f003 0207 	and.w	r2, r3, #7
 8001912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4422      	add	r2, r4
 800191a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800191c:	e105      	b.n	8001b2a <UART_SetConfig+0x4d6>
 800191e:	bf00      	nop
 8001920:	40011000 	.word	0x40011000
 8001924:	40011400 	.word	0x40011400
 8001928:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800192c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001930:	2200      	movs	r2, #0
 8001932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001936:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800193a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800193e:	4642      	mov	r2, r8
 8001940:	464b      	mov	r3, r9
 8001942:	1891      	adds	r1, r2, r2
 8001944:	6239      	str	r1, [r7, #32]
 8001946:	415b      	adcs	r3, r3
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
 800194a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800194e:	4641      	mov	r1, r8
 8001950:	1854      	adds	r4, r2, r1
 8001952:	4649      	mov	r1, r9
 8001954:	eb43 0501 	adc.w	r5, r3, r1
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	00eb      	lsls	r3, r5, #3
 8001962:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001966:	00e2      	lsls	r2, r4, #3
 8001968:	4614      	mov	r4, r2
 800196a:	461d      	mov	r5, r3
 800196c:	4643      	mov	r3, r8
 800196e:	18e3      	adds	r3, r4, r3
 8001970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001974:	464b      	mov	r3, r9
 8001976:	eb45 0303 	adc.w	r3, r5, r3
 800197a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800197e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800198a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800199a:	4629      	mov	r1, r5
 800199c:	008b      	lsls	r3, r1, #2
 800199e:	4621      	mov	r1, r4
 80019a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80019a4:	4621      	mov	r1, r4
 80019a6:	008a      	lsls	r2, r1, #2
 80019a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80019ac:	f7fe fc1c 	bl	80001e8 <__aeabi_uldivmod>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4b60      	ldr	r3, [pc, #384]	; (8001b38 <UART_SetConfig+0x4e4>)
 80019b6:	fba3 2302 	umull	r2, r3, r3, r2
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	011c      	lsls	r4, r3, #4
 80019be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80019c2:	2200      	movs	r2, #0
 80019c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80019c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80019cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80019d0:	4642      	mov	r2, r8
 80019d2:	464b      	mov	r3, r9
 80019d4:	1891      	adds	r1, r2, r2
 80019d6:	61b9      	str	r1, [r7, #24]
 80019d8:	415b      	adcs	r3, r3
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019e0:	4641      	mov	r1, r8
 80019e2:	1851      	adds	r1, r2, r1
 80019e4:	6139      	str	r1, [r7, #16]
 80019e6:	4649      	mov	r1, r9
 80019e8:	414b      	adcs	r3, r1
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019f8:	4659      	mov	r1, fp
 80019fa:	00cb      	lsls	r3, r1, #3
 80019fc:	4651      	mov	r1, sl
 80019fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a02:	4651      	mov	r1, sl
 8001a04:	00ca      	lsls	r2, r1, #3
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4642      	mov	r2, r8
 8001a0e:	189b      	adds	r3, r3, r2
 8001a10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a14:	464b      	mov	r3, r9
 8001a16:	460a      	mov	r2, r1
 8001a18:	eb42 0303 	adc.w	r3, r2, r3
 8001a1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001a38:	4649      	mov	r1, r9
 8001a3a:	008b      	lsls	r3, r1, #2
 8001a3c:	4641      	mov	r1, r8
 8001a3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a42:	4641      	mov	r1, r8
 8001a44:	008a      	lsls	r2, r1, #2
 8001a46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001a4a:	f7fe fbcd 	bl	80001e8 <__aeabi_uldivmod>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4b39      	ldr	r3, [pc, #228]	; (8001b38 <UART_SetConfig+0x4e4>)
 8001a54:	fba3 1302 	umull	r1, r3, r3, r2
 8001a58:	095b      	lsrs	r3, r3, #5
 8001a5a:	2164      	movs	r1, #100	; 0x64
 8001a5c:	fb01 f303 	mul.w	r3, r1, r3
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	3332      	adds	r3, #50	; 0x32
 8001a66:	4a34      	ldr	r2, [pc, #208]	; (8001b38 <UART_SetConfig+0x4e4>)
 8001a68:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6c:	095b      	lsrs	r3, r3, #5
 8001a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a72:	441c      	add	r4, r3
 8001a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a78:	2200      	movs	r2, #0
 8001a7a:	673b      	str	r3, [r7, #112]	; 0x70
 8001a7c:	677a      	str	r2, [r7, #116]	; 0x74
 8001a7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001a82:	4642      	mov	r2, r8
 8001a84:	464b      	mov	r3, r9
 8001a86:	1891      	adds	r1, r2, r2
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	415b      	adcs	r3, r3
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a92:	4641      	mov	r1, r8
 8001a94:	1851      	adds	r1, r2, r1
 8001a96:	6039      	str	r1, [r7, #0]
 8001a98:	4649      	mov	r1, r9
 8001a9a:	414b      	adcs	r3, r1
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001aaa:	4659      	mov	r1, fp
 8001aac:	00cb      	lsls	r3, r1, #3
 8001aae:	4651      	mov	r1, sl
 8001ab0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ab4:	4651      	mov	r1, sl
 8001ab6:	00ca      	lsls	r2, r1, #3
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	4603      	mov	r3, r0
 8001abe:	4642      	mov	r2, r8
 8001ac0:	189b      	adds	r3, r3, r2
 8001ac2:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ac4:	464b      	mov	r3, r9
 8001ac6:	460a      	mov	r2, r1
 8001ac8:	eb42 0303 	adc.w	r3, r2, r3
 8001acc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	663b      	str	r3, [r7, #96]	; 0x60
 8001ad8:	667a      	str	r2, [r7, #100]	; 0x64
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001ae6:	4649      	mov	r1, r9
 8001ae8:	008b      	lsls	r3, r1, #2
 8001aea:	4641      	mov	r1, r8
 8001aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001af0:	4641      	mov	r1, r8
 8001af2:	008a      	lsls	r2, r1, #2
 8001af4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001af8:	f7fe fb76 	bl	80001e8 <__aeabi_uldivmod>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <UART_SetConfig+0x4e4>)
 8001b02:	fba3 1302 	umull	r1, r3, r3, r2
 8001b06:	095b      	lsrs	r3, r3, #5
 8001b08:	2164      	movs	r1, #100	; 0x64
 8001b0a:	fb01 f303 	mul.w	r3, r1, r3
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	3332      	adds	r3, #50	; 0x32
 8001b14:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <UART_SetConfig+0x4e4>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	f003 020f 	and.w	r2, r3, #15
 8001b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4422      	add	r2, r4
 8001b28:	609a      	str	r2, [r3, #8]
}
 8001b2a:	bf00      	nop
 8001b2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001b30:	46bd      	mov	sp, r7
 8001b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b36:	bf00      	nop
 8001b38:	51eb851f 	.word	0x51eb851f

08001b3c <__libc_init_array>:
 8001b3c:	b570      	push	{r4, r5, r6, lr}
 8001b3e:	4d0d      	ldr	r5, [pc, #52]	; (8001b74 <__libc_init_array+0x38>)
 8001b40:	4c0d      	ldr	r4, [pc, #52]	; (8001b78 <__libc_init_array+0x3c>)
 8001b42:	1b64      	subs	r4, r4, r5
 8001b44:	10a4      	asrs	r4, r4, #2
 8001b46:	2600      	movs	r6, #0
 8001b48:	42a6      	cmp	r6, r4
 8001b4a:	d109      	bne.n	8001b60 <__libc_init_array+0x24>
 8001b4c:	4d0b      	ldr	r5, [pc, #44]	; (8001b7c <__libc_init_array+0x40>)
 8001b4e:	4c0c      	ldr	r4, [pc, #48]	; (8001b80 <__libc_init_array+0x44>)
 8001b50:	f000 f818 	bl	8001b84 <_init>
 8001b54:	1b64      	subs	r4, r4, r5
 8001b56:	10a4      	asrs	r4, r4, #2
 8001b58:	2600      	movs	r6, #0
 8001b5a:	42a6      	cmp	r6, r4
 8001b5c:	d105      	bne.n	8001b6a <__libc_init_array+0x2e>
 8001b5e:	bd70      	pop	{r4, r5, r6, pc}
 8001b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b64:	4798      	blx	r3
 8001b66:	3601      	adds	r6, #1
 8001b68:	e7ee      	b.n	8001b48 <__libc_init_array+0xc>
 8001b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b6e:	4798      	blx	r3
 8001b70:	3601      	adds	r6, #1
 8001b72:	e7f2      	b.n	8001b5a <__libc_init_array+0x1e>
 8001b74:	08001bac 	.word	0x08001bac
 8001b78:	08001bac 	.word	0x08001bac
 8001b7c:	08001bac 	.word	0x08001bac
 8001b80:	08001bb0 	.word	0x08001bb0

08001b84 <_init>:
 8001b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b86:	bf00      	nop
 8001b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b8a:	bc08      	pop	{r3}
 8001b8c:	469e      	mov	lr, r3
 8001b8e:	4770      	bx	lr

08001b90 <_fini>:
 8001b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b92:	bf00      	nop
 8001b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b96:	bc08      	pop	{r3}
 8001b98:	469e      	mov	lr, r3
 8001b9a:	4770      	bx	lr
