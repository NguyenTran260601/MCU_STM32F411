
RTC_ALARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003768  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a3c  08003a3c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a44  08003a44  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a44  08003a44  00013a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a48  08003a48  00013a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000070  08003abc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003abc  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adec  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a50  00000000  00000000  0002ae8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  0002c8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d8  00000000  00000000  0002d160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001661c  00000000  00000000  0002d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abef  00000000  00000000  00043f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008be63  00000000  00000000  0004eb43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da9a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002614  00000000  00000000  000da9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080038f0 	.word	0x080038f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080038f0 	.word	0x080038f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <SysTick_Handler>:
#include "main.h"

extern RTC_HandleTypeDef hrtc;

void SysTick_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000598:	f000 fba0 	bl	8000cdc <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800059c:	f000 fcec 	bl	8000f78 <HAL_SYSTICK_IRQHandler>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80005a8:	2001      	movs	r0, #1
 80005aa:	f000 fe77 	bl	800129c <HAL_GPIO_EXTI_IRQHandler>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <RTC_Alarm_IRQHandler>:

void RTC_Alarm_IRQHandler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_RTC_AlarmIRQHandler(&hrtc);
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <RTC_Alarm_IRQHandler+0x10>)
 80005ba:	f002 f821 	bl	8002600 <HAL_RTC_AlarmIRQHandler>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200000d0 	.word	0x200000d0

080005c8 <printmsg>:

UART_HandleTypeDef huart2;
RTC_HandleTypeDef hrtc;

void printmsg(char *format,...)
 {
 80005c8:	b40f      	push	{r0, r1, r2, r3}
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b096      	sub	sp, #88	; 0x58
 80005ce:	af00      	add	r7, sp, #0

	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80005d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005d4:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 80005d6:	f107 0308 	add.w	r3, r7, #8
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fd2e 	bl	8003040 <vsiprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff fdf9 	bl	80001e0 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	f107 0108 	add.w	r1, r7, #8
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <printmsg+0x48>)
 80005fc:	f002 f964 	bl	80028c8 <HAL_UART_Transmit>
	va_end(args);

 }
 8000600:	bf00      	nop
 8000602:	3758      	adds	r7, #88	; 0x58
 8000604:	46bd      	mov	sp, r7
 8000606:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800060a:	b004      	add	sp, #16
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	2000008c 	.word	0x2000008c

08000614 <main>:

int main()
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_Init();
 8000618:	f000 fb0e 	bl	8000c38 <HAL_Init>
	GPIO_Init();
 800061c:	f000 f80e 	bl	800063c <GPIO_Init>
	SystemClockConfig_HSE(SYSCLK_CONF_FREQ_50MHz);
 8000620:	2032      	movs	r0, #50	; 0x32
 8000622:	f000 f96b 	bl	80008fc <SystemClockConfig_HSE>
	UART2_Init();
 8000626:	f000 f855 	bl	80006d4 <UART2_Init>

	printmsg("This is RTC Alarm Test program\r\n");
 800062a:	4803      	ldr	r0, [pc, #12]	; (8000638 <main+0x24>)
 800062c:	f7ff ffcc 	bl	80005c8 <printmsg>

	RTC_Init();
 8000630:	f000 f876 	bl	8000720 <RTC_Init>

	while(1);
 8000634:	e7fe      	b.n	8000634 <main+0x20>
 8000636:	bf00      	nop
 8000638:	0800394c 	.word	0x0800394c

0800063c <GPIO_Init>:
}



void GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	; 0x30
 8000640:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <GPIO_Init+0x8c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a1f      	ldr	r2, [pc, #124]	; (80006c8 <GPIO_Init+0x8c>)
 800064c:	f043 0308 	orr.w	r3, r3, #8
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <GPIO_Init+0x8c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0308 	and.w	r3, r3, #8
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <GPIO_Init+0x8c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a18      	ldr	r2, [pc, #96]	; (80006c8 <GPIO_Init+0x8c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <GPIO_Init+0x8c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef ledgpio,buttongpio;
	ledgpio.Pin = GPIO_PIN_12;
 800067a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067e:	61fb      	str	r3, [r7, #28]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]
	ledgpio.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD,&ledgpio);
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4619      	mov	r1, r3
 800068e:	480f      	ldr	r0, [pc, #60]	; (80006cc <GPIO_Init+0x90>)
 8000690:	f000 fc80 	bl	8000f94 <HAL_GPIO_Init>

	buttongpio.Pin = GPIO_PIN_0;
 8000694:	2301      	movs	r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
	buttongpio.Mode = GPIO_MODE_IT_FALLING;
 8000698:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800069c:	60fb      	str	r3, [r7, #12]
	buttongpio.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA,&buttongpio);
 80006a2:	f107 0308 	add.w	r3, r7, #8
 80006a6:	4619      	mov	r1, r3
 80006a8:	4809      	ldr	r0, [pc, #36]	; (80006d0 <GPIO_Init+0x94>)
 80006aa:	f000 fc73 	bl	8000f94 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI0_IRQn,15,0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	210f      	movs	r1, #15
 80006b2:	2006      	movs	r0, #6
 80006b4:	f000 fc0d 	bl	8000ed2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006b8:	2006      	movs	r0, #6
 80006ba:	f000 fc26 	bl	8000f0a <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	; 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020c00 	.word	0x40020c00
 80006d0:	40020000 	.word	0x40020000

080006d4 <UART2_Init>:



void UART2_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <UART2_Init+0x44>)
 80006da:	4a10      	ldr	r2, [pc, #64]	; (800071c <UART2_Init+0x48>)
 80006dc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <UART2_Init+0x44>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <UART2_Init+0x44>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <UART2_Init+0x44>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <UART2_Init+0x44>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <UART2_Init+0x44>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <UART2_Init+0x44>)
 8000700:	220c      	movs	r2, #12
 8000702:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <UART2_Init+0x44>)
 8000706:	f002 f892 	bl	800282e <HAL_UART_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <UART2_Init+0x40>
	{
		Error_Handler();
 8000710:	f000 f97e 	bl	8000a10 <Error_Handler>
	}
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000008c 	.word	0x2000008c
 800071c:	40004400 	.word	0x40004400

08000720 <RTC_Init>:

void RTC_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
   hrtc.Instance = RTC;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <RTC_Init+0x44>)
 8000726:	4a10      	ldr	r2, [pc, #64]	; (8000768 <RTC_Init+0x48>)
 8000728:	601a      	str	r2, [r3, #0]
   hrtc.Init.HourFormat =RTC_HOURFORMAT_12;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <RTC_Init+0x44>)
 800072c:	2240      	movs	r2, #64	; 0x40
 800072e:	605a      	str	r2, [r3, #4]
   hrtc.Init.AsynchPrediv = 0x7F;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <RTC_Init+0x44>)
 8000732:	227f      	movs	r2, #127	; 0x7f
 8000734:	609a      	str	r2, [r3, #8]
   hrtc.Init.SynchPrediv = 0xFF;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <RTC_Init+0x44>)
 8000738:	22ff      	movs	r2, #255	; 0xff
 800073a:	60da      	str	r2, [r3, #12]
   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <RTC_Init+0x44>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_LOW;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <RTC_Init+0x44>)
 8000744:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000748:	615a      	str	r2, [r3, #20]
   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <RTC_Init+0x44>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]

   if( HAL_RTC_Init(&hrtc) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <RTC_Init+0x44>)
 8000752:	f001 fb43 	bl	8001ddc <HAL_RTC_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <RTC_Init+0x40>
   {
	   Error_Handler();
 800075c:	f000 f958 	bl	8000a10 <Error_Handler>
   }
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200000d0 	.word	0x200000d0
 8000768:	40002800 	.word	0x40002800

0800076c <RTC_CalendarConfig>:

void  RTC_CalendarConfig(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef RTC_TimeInit;
	RTC_DateTypeDef RTC_DateInit;

	memset(&RTC_TimeInit,0,sizeof(RTC_TimeInit));
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2214      	movs	r2, #20
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f002 fc43 	bl	8003004 <memset>
	memset(&RTC_DateInit,0,sizeof(RTC_DateInit));
 800077e:	463b      	mov	r3, r7
 8000780:	2204      	movs	r2, #4
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f002 fc3d 	bl	8003004 <memset>

	RTC_TimeInit.Hours = 7;
 800078a:	2307      	movs	r3, #7
 800078c:	713b      	strb	r3, [r7, #4]
	RTC_TimeInit.Minutes = 59;
 800078e:	233b      	movs	r3, #59	; 0x3b
 8000790:	717b      	strb	r3, [r7, #5]
	RTC_TimeInit.Seconds = 50;
 8000792:	2332      	movs	r3, #50	; 0x32
 8000794:	71bb      	strb	r3, [r7, #6]
	RTC_TimeInit.TimeFormat = RTC_HOURFORMAT12_AM;
 8000796:	2300      	movs	r3, #0
 8000798:	71fb      	strb	r3, [r7, #7]
	HAL_RTC_SetTime(&hrtc, &RTC_TimeInit,RTC_FORMAT_BIN);
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	4619      	mov	r1, r3
 80007a0:	480a      	ldr	r0, [pc, #40]	; (80007cc <RTC_CalendarConfig+0x60>)
 80007a2:	f001 fb91 	bl	8001ec8 <HAL_RTC_SetTime>


	RTC_DateInit.Date = 20;
 80007a6:	2314      	movs	r3, #20
 80007a8:	70bb      	strb	r3, [r7, #2]
	RTC_DateInit.Month = RTC_MONTH_JULY;
 80007aa:	2307      	movs	r3, #7
 80007ac:	707b      	strb	r3, [r7, #1]
	RTC_DateInit.Year = 22;
 80007ae:	2316      	movs	r3, #22
 80007b0:	70fb      	strb	r3, [r7, #3]
	RTC_DateInit.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80007b2:	2303      	movs	r3, #3
 80007b4:	703b      	strb	r3, [r7, #0]

	HAL_RTC_SetDate(&hrtc,&RTC_DateInit,RTC_FORMAT_BIN);
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	4619      	mov	r1, r3
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <RTC_CalendarConfig+0x60>)
 80007be:	f001 fc7b 	bl	80020b8 <HAL_RTC_SetDate>

}
 80007c2:	bf00      	nop
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000d0 	.word	0x200000d0

080007d0 <getDayofweek>:

char* getDayofweek(uint8_t number)
{
 80007d0:	b4b0      	push	{r4, r5, r7}
 80007d2:	b08b      	sub	sp, #44	; 0x2c
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	char *weekday[] = { "Monday", "TuesDay", "Wednesday","Thursday","Friday","Saturday","Sunday"};
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <getDayofweek+0x38>)
 80007dc:	f107 040c 	add.w	r4, r7, #12
 80007e0:	461d      	mov	r5, r3
 80007e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return weekday[number-1];
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	3b01      	subs	r3, #1
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	3328      	adds	r3, #40	; 0x28
 80007f6:	443b      	add	r3, r7
 80007f8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	372c      	adds	r7, #44	; 0x2c
 8000800:	46bd      	mov	sp, r7
 8000802:	bcb0      	pop	{r4, r5, r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	08003970 	.word	0x08003970

0800080c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800080c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080e:	b08b      	sub	sp, #44	; 0x2c
 8000810:	af02      	add	r7, sp, #8
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
	 RTC_TimeTypeDef RTC_TimeRead;
	 RTC_DateTypeDef RTC_DateRead;

	 RTC_CalendarConfig();
 8000816:	f7ff ffa9 	bl	800076c <RTC_CalendarConfig>

	 HAL_RTC_GetTime(&hrtc,&RTC_TimeRead,RTC_FORMAT_BIN);
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2200      	movs	r2, #0
 8000820:	4619      	mov	r1, r3
 8000822:	4815      	ldr	r0, [pc, #84]	; (8000878 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000824:	f001 fbea 	bl	8001ffc <HAL_RTC_GetTime>

	 HAL_RTC_GetDate(&hrtc,&RTC_DateRead,RTC_FORMAT_BIN);
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	2200      	movs	r2, #0
 800082e:	4619      	mov	r1, r3
 8000830:	4811      	ldr	r0, [pc, #68]	; (8000878 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000832:	f001 fcc5 	bl	80021c0 <HAL_RTC_GetDate>

	 printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 8000836:	7b3b      	ldrb	r3, [r7, #12]
 8000838:	4619      	mov	r1, r3
			 RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
 800083a:	7b7b      	ldrb	r3, [r7, #13]
	 printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 800083c:	461a      	mov	r2, r3
			 RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
 800083e:	7bbb      	ldrb	r3, [r7, #14]
	 printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 8000840:	480e      	ldr	r0, [pc, #56]	; (800087c <HAL_GPIO_EXTI_Callback+0x70>)
 8000842:	f7ff fec1 	bl	80005c8 <printmsg>
	 printmsg("Current Date is : %02d-%2d-%2d  <%s> \r\n",RTC_DateRead.Month,RTC_DateRead.Date,\
 8000846:	7a7b      	ldrb	r3, [r7, #9]
 8000848:	461c      	mov	r4, r3
 800084a:	7abb      	ldrb	r3, [r7, #10]
 800084c:	461d      	mov	r5, r3
			 RTC_DateRead.Year,getDayofweek(RTC_DateRead.WeekDay));
 800084e:	7afb      	ldrb	r3, [r7, #11]
	 printmsg("Current Date is : %02d-%2d-%2d  <%s> \r\n",RTC_DateRead.Month,RTC_DateRead.Date,\
 8000850:	461e      	mov	r6, r3
 8000852:	7a3b      	ldrb	r3, [r7, #8]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ffbb 	bl	80007d0 <getDayofweek>
 800085a:	4603      	mov	r3, r0
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	4633      	mov	r3, r6
 8000860:	462a      	mov	r2, r5
 8000862:	4621      	mov	r1, r4
 8000864:	4806      	ldr	r0, [pc, #24]	; (8000880 <HAL_GPIO_EXTI_Callback+0x74>)
 8000866:	f7ff feaf 	bl	80005c8 <printmsg>

	 RTC_AlarmConfig();
 800086a:	f000 f80b 	bl	8000884 <RTC_AlarmConfig>
}
 800086e:	bf00      	nop
 8000870:	3724      	adds	r7, #36	; 0x24
 8000872:	46bd      	mov	sp, r7
 8000874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000876:	bf00      	nop
 8000878:	200000d0 	.word	0x200000d0
 800087c:	0800398c 	.word	0x0800398c
 8000880:	080039b0 	.word	0x080039b0

08000884 <RTC_AlarmConfig>:


void RTC_AlarmConfig()
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
	 RTC_AlarmTypeDef AlarmA_Set;

	 memset(&AlarmA_Set,0,sizeof(AlarmA_Set));
 800088a:	463b      	mov	r3, r7
 800088c:	2228      	movs	r2, #40	; 0x28
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f002 fbb7 	bl	8003004 <memset>

	 HAL_RTC_DeactivateAlarm(&hrtc,RTC_ALARM_A);
 8000896:	f44f 7180 	mov.w	r1, #256	; 0x100
 800089a:	4816      	ldr	r0, [pc, #88]	; (80008f4 <RTC_AlarmConfig+0x70>)
 800089c:	f001 fe22 	bl	80024e4 <HAL_RTC_DeactivateAlarm>

	 //set alarm 8h AM every sunday

	 AlarmA_Set.Alarm = RTC_ALARM_A;
 80008a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
	 AlarmA_Set.AlarmTime.Hours = 8;
 80008a6:	2308      	movs	r3, #8
 80008a8:	703b      	strb	r3, [r7, #0]
	 AlarmA_Set.AlarmTime.Minutes = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	707b      	strb	r3, [r7, #1]
	 AlarmA_Set.AlarmTime.Seconds = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	70bb      	strb	r3, [r7, #2]
	 AlarmA_Set.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80008b2:	2300      	movs	r3, #0
 80008b4:	70fb      	strb	r3, [r7, #3]
	 AlarmA_Set.AlarmDateWeekDaySel  = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80008b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008ba:	61fb      	str	r3, [r7, #28]
	 AlarmA_Set.AlarmDateWeekDay = RTC_WEEKDAY_SUNDAY;
 80008bc:	2307      	movs	r3, #7
 80008be:	f887 3020 	strb.w	r3, [r7, #32]

	 AlarmA_Set.AlarmMask = RTC_ALARMMASK_MINUTES |RTC_ALARMMASK_SECONDS ;
 80008c2:	f248 0380 	movw	r3, #32896	; 0x8080
 80008c6:	617b      	str	r3, [r7, #20]

	 AlarmA_Set.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80008c8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80008cc:	61bb      	str	r3, [r7, #24]
	 if ( HAL_RTC_SetAlarm_IT(&hrtc, &AlarmA_Set, RTC_FORMAT_BIN) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	4807      	ldr	r0, [pc, #28]	; (80008f4 <RTC_AlarmConfig+0x70>)
 80008d6:	f001 fcc3 	bl	8002260 <HAL_RTC_SetAlarm_IT>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <RTC_AlarmConfig+0x60>
	 {
		 Error_Handler();
 80008e0:	f000 f896 	bl	8000a10 <Error_Handler>
	 }

	 printmsg("Alarm Set Successful\r\n");
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <RTC_AlarmConfig+0x74>)
 80008e6:	f7ff fe6f 	bl	80005c8 <printmsg>
}
 80008ea:	bf00      	nop
 80008ec:	3728      	adds	r7, #40	; 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000d0 	.word	0x200000d0
 80008f8:	080039d8 	.word	0x080039d8

080008fc <SystemClockConfig_HSE>:

void SystemClockConfig_HSE(uint8_t clock_freq)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b094      	sub	sp, #80	; 0x50
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_inits;
	RCC_ClkInitTypeDef clk_inits;

	uint32_t FLatency  = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	64fb      	str	r3, [r7, #76]	; 0x4c
	osc_inits.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800090a:	2301      	movs	r3, #1
 800090c:	61fb      	str	r3, [r7, #28]
	osc_inits.HSEState = RCC_HSE_ON;
 800090e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000912:	623b      	str	r3, [r7, #32]

	osc_inits.PLL.PLLState = RCC_PLL_ON;
 8000914:	2302      	movs	r3, #2
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
	osc_inits.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000918:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800091c:	63bb      	str	r3, [r7, #56]	; 0x38


	switch(clock_freq)
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b64      	cmp	r3, #100	; 0x64
 8000922:	d034      	beq.n	800098e <SystemClockConfig_HSE+0x92>
 8000924:	2b64      	cmp	r3, #100	; 0x64
 8000926:	dc6c      	bgt.n	8000a02 <SystemClockConfig_HSE+0x106>
 8000928:	2b32      	cmp	r3, #50	; 0x32
 800092a:	d002      	beq.n	8000932 <SystemClockConfig_HSE+0x36>
 800092c:	2b50      	cmp	r3, #80	; 0x50
 800092e:	d017      	beq.n	8000960 <SystemClockConfig_HSE+0x64>
			FLatency = FLASH_LATENCY_3;

			break;
		}
		default:
			return;
 8000930:	e067      	b.n	8000a02 <SystemClockConfig_HSE+0x106>
			osc_inits.PLL.PLLM = 8;
 8000932:	2308      	movs	r3, #8
 8000934:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_inits.PLL.PLLN = 100;
 8000936:	2364      	movs	r3, #100	; 0x64
 8000938:	643b      	str	r3, [r7, #64]	; 0x40
			osc_inits.PLL.PLLP = 2;
 800093a:	2302      	movs	r3, #2
 800093c:	647b      	str	r3, [r7, #68]	; 0x44
			osc_inits.PLL.PLLQ = 8;
 800093e:	2308      	movs	r3, #8
 8000940:	64bb      	str	r3, [r7, #72]	; 0x48
			clk_inits.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000942:	230f      	movs	r3, #15
 8000944:	60bb      	str	r3, [r7, #8]
			clk_inits.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; //50MHz
 8000946:	2302      	movs	r3, #2
 8000948:	60fb      	str	r3, [r7, #12]
			clk_inits.AHBCLKDivider = RCC_SYSCLK_DIV1; // 50MHz AHB
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
			clk_inits.APB1CLKDivider = RCC_HCLK_DIV2; // 25MHz APB1
 800094e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000952:	617b      	str	r3, [r7, #20]
			clk_inits.APB2CLKDivider = RCC_HCLK_DIV2;// 25MHz APB2
 8000954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000958:	61bb      	str	r3, [r7, #24]
			FLatency  = FLASH_LATENCY_1;
 800095a:	2301      	movs	r3, #1
 800095c:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 800095e:	e02d      	b.n	80009bc <SystemClockConfig_HSE+0xc0>
			osc_inits.PLL.PLLM = 8;
 8000960:	2308      	movs	r3, #8
 8000962:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_inits.PLL.PLLN = 160;
 8000964:	23a0      	movs	r3, #160	; 0xa0
 8000966:	643b      	str	r3, [r7, #64]	; 0x40
			osc_inits.PLL.PLLP = 2;
 8000968:	2302      	movs	r3, #2
 800096a:	647b      	str	r3, [r7, #68]	; 0x44
			osc_inits.PLL.PLLQ = 8;
 800096c:	2308      	movs	r3, #8
 800096e:	64bb      	str	r3, [r7, #72]	; 0x48
			clk_inits.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000970:	230f      	movs	r3, #15
 8000972:	60bb      	str	r3, [r7, #8]
			clk_inits.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; //80MHz
 8000974:	2302      	movs	r3, #2
 8000976:	60fb      	str	r3, [r7, #12]
			clk_inits.AHBCLKDivider = RCC_SYSCLK_DIV1; // 80MHz AHB
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
			clk_inits.APB1CLKDivider = RCC_HCLK_DIV2; // 40MHz APB1
 800097c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000980:	617b      	str	r3, [r7, #20]
			clk_inits.APB2CLKDivider = RCC_HCLK_DIV2;// 40MHz APB2
 8000982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000986:	61bb      	str	r3, [r7, #24]
			FLatency  = FLASH_LATENCY_2;
 8000988:	2302      	movs	r3, #2
 800098a:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 800098c:	e016      	b.n	80009bc <SystemClockConfig_HSE+0xc0>
			osc_inits.PLL.PLLM = 8;
 800098e:	2308      	movs	r3, #8
 8000990:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_inits.PLL.PLLN = 200;
 8000992:	23c8      	movs	r3, #200	; 0xc8
 8000994:	643b      	str	r3, [r7, #64]	; 0x40
			osc_inits.PLL.PLLP = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	647b      	str	r3, [r7, #68]	; 0x44
			osc_inits.PLL.PLLQ = 8;
 800099a:	2308      	movs	r3, #8
 800099c:	64bb      	str	r3, [r7, #72]	; 0x48
			clk_inits.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800099e:	230f      	movs	r3, #15
 80009a0:	60bb      	str	r3, [r7, #8]
			clk_inits.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; //100MHz
 80009a2:	2302      	movs	r3, #2
 80009a4:	60fb      	str	r3, [r7, #12]
			clk_inits.AHBCLKDivider = RCC_SYSCLK_DIV1; // 100MHz AHB
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
			clk_inits.APB1CLKDivider = RCC_HCLK_DIV2; // 50MHz APB1
 80009aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ae:	617b      	str	r3, [r7, #20]
			clk_inits.APB2CLKDivider = RCC_HCLK_DIV2;// 50MHz APB2
 80009b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b4:	61bb      	str	r3, [r7, #24]
			FLatency = FLASH_LATENCY_3;
 80009b6:	2303      	movs	r3, #3
 80009b8:	64fb      	str	r3, [r7, #76]	; 0x4c
			break;
 80009ba:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_inits) != HAL_OK)
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fc83 	bl	80012cc <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClockConfig_HSE+0xd4>
	{
		Error_Handler();
 80009cc:	f000 f820 	bl	8000a10 <Error_Handler>
	}

	if(HAL_RCC_ClockConfig(&clk_inits, FLatency ) != HAL_OK)
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fef0 	bl	80017bc <HAL_RCC_ClockConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClockConfig_HSE+0xea>
	{
		Error_Handler();
 80009e2:	f000 f815 	bl	8000a10 <Error_Handler>
	}

	//configure systick

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80009e6:	f001 f8d5 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 80009ea:	4603      	mov	r3, r0
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <SystemClockConfig_HSE+0x110>)
 80009ee:	fba2 2303 	umull	r2, r3, r2, r3
 80009f2:	099b      	lsrs	r3, r3, #6
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 fa96 	bl	8000f26 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80009fa:	2004      	movs	r0, #4
 80009fc:	f000 faa0 	bl	8000f40 <HAL_SYSTICK_CLKSourceConfig>
 8000a00:	e000      	b.n	8000a04 <SystemClockConfig_HSE+0x108>
			return;
 8000a02:	bf00      	nop

}
 8000a04:	3750      	adds	r7, #80	; 0x50
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	10624dd3 	.word	0x10624dd3

08000a10 <Error_Handler>:


void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
	while(1);
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x4>
	...

08000a18 <HAL_MspInit>:

#include "main.h"


void HAL_MspInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	//Low level processor specific inits
	//1. Set up the priority grouping of the arm cortex Mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 fa4d 	bl	8000ebc <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the require system exceptions of the arm cortex Mx processor
	//system control block -> System handler control and state register
	SCB->SHCSR |= 0x7 << 16; //usage, bus, memory fault system exceptions
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <HAL_MspInit+0x40>)
 8000a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a26:	4a0c      	ldr	r2, [pc, #48]	; (8000a58 <HAL_MspInit+0x40>)
 8000a28:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000a2c:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	f06f 000b 	mvn.w	r0, #11
 8000a36:	f000 fa4c 	bl	8000ed2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f06f 000a 	mvn.w	r0, #10
 8000a42:	f000 fa46 	bl	8000ed2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	f06f 0009 	mvn.w	r0, #9
 8000a4e:	f000 fa40 	bl	8000ed2 <HAL_NVIC_SetPriority>
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *huart2)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;

	//Low level inits for UART2 Peripheral
	//1. Enable the clock for the UART2 and GPIO peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <HAL_UART_MspInit+0x88>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ae4 <HAL_UART_MspInit+0x88>)
 8000a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a72:	6413      	str	r3, [r2, #64]	; 0x40
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <HAL_UART_MspInit+0x88>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <HAL_UART_MspInit+0x88>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <HAL_UART_MspInit+0x88>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <HAL_UART_MspInit+0x88>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
	//2. The pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; //UART2_TX
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FAST;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 8000aac:	2307      	movs	r3, #7
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <HAL_UART_MspInit+0x8c>)
 8000ab8:	f000 fa6c 	bl	8000f94 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000abc:	2308      	movs	r3, #8
 8000abe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <HAL_UART_MspInit+0x8c>)
 8000ac8:	f000 fa64 	bl	8000f94 <HAL_GPIO_Init>
	//3. Enable the IRQ and set up the priority (NVIC Settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000acc:	2026      	movs	r0, #38	; 0x26
 8000ace:	f000 fa1c 	bl	8000f0a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	2026      	movs	r0, #38	; 0x26
 8000ad8:	f000 f9fb 	bl	8000ed2 <HAL_NVIC_SetPriority>
}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000

08000aec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b094      	sub	sp, #80	; 0x50
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	  RCC_OscInitTypeDef        RCC_OscInitStruct;
	  RCC_PeriphCLKInitTypeDef RCC_RTCPeriClkInit;
	  //1. Turn on the LSE
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8000af4:	2304      	movs	r3, #4
 8000af6:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000af8:	2301      	movs	r3, #1
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	63bb      	str	r3, [r7, #56]	; 0x38
	  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 fbe1 	bl	80012cc <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <HAL_RTC_MspInit+0x28>
	  {
		  Error_Handler();
 8000b10:	f7ff ff7e 	bl	8000a10 <Error_Handler>
	  }

	  //2. select LSE as RTCCLK
	  RCC_RTCPeriClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b14:	2302      	movs	r3, #2
 8000b16:	60bb      	str	r3, [r7, #8]
	  RCC_RTCPeriClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b1c:	61bb      	str	r3, [r7, #24]
	  if( HAL_RCCEx_PeriphCLKConfig(&RCC_RTCPeriClkInit)!= HAL_OK)
 8000b1e:	f107 0308 	add.w	r3, r7, #8
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 f86a 	bl	8001bfc <HAL_RCCEx_PeriphCLKConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_RTC_MspInit+0x46>
	  {
		  Error_Handler();
 8000b2e:	f7ff ff6f 	bl	8000a10 <Error_Handler>
	  }

	  //3. Enable the RTC Clock
	  __HAL_RCC_RTC_ENABLE();
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <HAL_RTC_MspInit+0x64>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	601a      	str	r2, [r3, #0]

	  //4. Enable the RTC Alarm IRQ in the NVIC
	  HAL_NVIC_SetPriority(RTC_Alarm_IRQn,15,0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	2029      	movs	r0, #41	; 0x29
 8000b3e:	f000 f9c8 	bl	8000ed2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000b42:	2029      	movs	r0, #41	; 0x29
 8000b44:	f000 f9e1 	bl	8000f0a <HAL_NVIC_EnableIRQ>
}
 8000b48:	bf00      	nop
 8000b4a:	3750      	adds	r7, #80	; 0x50
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	42470e3c 	.word	0x42470e3c

08000b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b5c:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <_sbrk+0x5c>)
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <_sbrk+0x60>)
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <_sbrk+0x64>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <_sbrk+0x68>)
 8000b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d207      	bcs.n	8000b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b84:	f002 fa14 	bl	8002fb0 <__errno>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	e009      	b.n	8000ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <_sbrk+0x64>)
 8000ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20020000 	.word	0x20020000
 8000bb4:	00000400 	.word	0x00000400
 8000bb8:	200000f0 	.word	0x200000f0
 8000bbc:	20000108 	.word	0x20000108

08000bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <SystemInit+0x20>)
 8000bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <SystemInit+0x20>)
 8000bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bea:	490e      	ldr	r1, [pc, #56]	; (8000c24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bec:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c00:	4c0b      	ldr	r4, [pc, #44]	; (8000c30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c0e:	f7ff ffd7 	bl	8000bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c12:	f002 f9d3 	bl	8002fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c16:	f7ff fcfd 	bl	8000614 <main>
  bx  lr    
 8000c1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c28:	08003a4c 	.word	0x08003a4c
  ldr r2, =_sbss
 8000c2c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c30:	20000108 	.word	0x20000108

08000c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC_IRQHandler>
	...

08000c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <HAL_Init+0x40>)
 8000c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <HAL_Init+0x40>)
 8000c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <HAL_Init+0x40>)
 8000c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f92b 	bl	8000ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c66:	2000      	movs	r0, #0
 8000c68:	f000 f808 	bl	8000c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6c:	f7ff fed4 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023c00 	.word	0x40023c00

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x54>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_InitTick+0x58>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f943 	bl	8000f26 <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f90b 	bl	8000ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_InitTick+0x5c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	200000f4 	.word	0x200000f4

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200000f4 	.word	0x200000f4

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e88:	d301      	bcc.n	8000e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00f      	b.n	8000eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <SysTick_Config+0x40>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e96:	210f      	movs	r1, #15
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f7ff ff8e 	bl	8000dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	e000e010 	.word	0xe000e010

08000ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff29 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee4:	f7ff ff3e 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f7ff ff8e 	bl	8000e10 <NVIC_EncodePriority>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff5d 	bl	8000dbc <__NVIC_SetPriority>
}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff31 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffa2 	bl	8000e78 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d106      	bne.n	8000f5c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000f5a:	e005      	b.n	8000f68 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000f62:	f023 0304 	bic.w	r3, r3, #4
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000f7c:	f000 f802 	bl	8000f84 <HAL_SYSTICK_Callback>
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
 8000fae:	e159      	b.n	8001264 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	f040 8148 	bne.w	800125e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d005      	beq.n	8000fe6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d130      	bne.n	8001048 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800101c:	2201      	movs	r2, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	091b      	lsrs	r3, r3, #4
 8001032:	f003 0201 	and.w	r2, r3, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b03      	cmp	r3, #3
 8001052:	d017      	beq.n	8001084 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d123      	bne.n	80010d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	08da      	lsrs	r2, r3, #3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3208      	adds	r2, #8
 8001098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	220f      	movs	r2, #15
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	691a      	ldr	r2, [r3, #16]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	69b9      	ldr	r1, [r7, #24]
 80010d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0203 	and.w	r2, r3, #3
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80a2 	beq.w	800125e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b57      	ldr	r3, [pc, #348]	; (800127c <HAL_GPIO_Init+0x2e8>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a56      	ldr	r2, [pc, #344]	; (800127c <HAL_GPIO_Init+0x2e8>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b54      	ldr	r3, [pc, #336]	; (800127c <HAL_GPIO_Init+0x2e8>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001136:	4a52      	ldr	r2, [pc, #328]	; (8001280 <HAL_GPIO_Init+0x2ec>)
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	3302      	adds	r3, #2
 800113e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	220f      	movs	r2, #15
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a49      	ldr	r2, [pc, #292]	; (8001284 <HAL_GPIO_Init+0x2f0>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d019      	beq.n	8001196 <HAL_GPIO_Init+0x202>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a48      	ldr	r2, [pc, #288]	; (8001288 <HAL_GPIO_Init+0x2f4>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d013      	beq.n	8001192 <HAL_GPIO_Init+0x1fe>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a47      	ldr	r2, [pc, #284]	; (800128c <HAL_GPIO_Init+0x2f8>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d00d      	beq.n	800118e <HAL_GPIO_Init+0x1fa>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a46      	ldr	r2, [pc, #280]	; (8001290 <HAL_GPIO_Init+0x2fc>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d007      	beq.n	800118a <HAL_GPIO_Init+0x1f6>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a45      	ldr	r2, [pc, #276]	; (8001294 <HAL_GPIO_Init+0x300>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d101      	bne.n	8001186 <HAL_GPIO_Init+0x1f2>
 8001182:	2304      	movs	r3, #4
 8001184:	e008      	b.n	8001198 <HAL_GPIO_Init+0x204>
 8001186:	2307      	movs	r3, #7
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x204>
 800118a:	2303      	movs	r3, #3
 800118c:	e004      	b.n	8001198 <HAL_GPIO_Init+0x204>
 800118e:	2302      	movs	r3, #2
 8001190:	e002      	b.n	8001198 <HAL_GPIO_Init+0x204>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <HAL_GPIO_Init+0x204>
 8001196:	2300      	movs	r3, #0
 8001198:	69fa      	ldr	r2, [r7, #28]
 800119a:	f002 0203 	and.w	r2, r2, #3
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	4093      	lsls	r3, r2
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a8:	4935      	ldr	r1, [pc, #212]	; (8001280 <HAL_GPIO_Init+0x2ec>)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b6:	4b38      	ldr	r3, [pc, #224]	; (8001298 <HAL_GPIO_Init+0x304>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011da:	4a2f      	ldr	r2, [pc, #188]	; (8001298 <HAL_GPIO_Init+0x304>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e0:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <HAL_GPIO_Init+0x304>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001204:	4a24      	ldr	r2, [pc, #144]	; (8001298 <HAL_GPIO_Init+0x304>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800120a:	4b23      	ldr	r3, [pc, #140]	; (8001298 <HAL_GPIO_Init+0x304>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800122e:	4a1a      	ldr	r2, [pc, #104]	; (8001298 <HAL_GPIO_Init+0x304>)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_GPIO_Init+0x304>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001258:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <HAL_GPIO_Init+0x304>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3301      	adds	r3, #1
 8001262:	61fb      	str	r3, [r7, #28]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	2b0f      	cmp	r3, #15
 8001268:	f67f aea2 	bls.w	8000fb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40013800 	.word	0x40013800
 8001284:	40020000 	.word	0x40020000
 8001288:	40020400 	.word	0x40020400
 800128c:	40020800 	.word	0x40020800
 8001290:	40020c00 	.word	0x40020c00
 8001294:	40021000 	.word	0x40021000
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a8:	695a      	ldr	r2, [r3, #20]
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff faa6 	bl	800080c <HAL_GPIO_EXTI_Callback>
  }
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40013c00 	.word	0x40013c00

080012cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e267      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d075      	beq.n	80013d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ea:	4b88      	ldr	r3, [pc, #544]	; (800150c <HAL_RCC_OscConfig+0x240>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	d00c      	beq.n	8001310 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f6:	4b85      	ldr	r3, [pc, #532]	; (800150c <HAL_RCC_OscConfig+0x240>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d112      	bne.n	8001328 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001302:	4b82      	ldr	r3, [pc, #520]	; (800150c <HAL_RCC_OscConfig+0x240>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800130e:	d10b      	bne.n	8001328 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	4b7e      	ldr	r3, [pc, #504]	; (800150c <HAL_RCC_OscConfig+0x240>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d05b      	beq.n	80013d4 <HAL_RCC_OscConfig+0x108>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d157      	bne.n	80013d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e242      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001330:	d106      	bne.n	8001340 <HAL_RCC_OscConfig+0x74>
 8001332:	4b76      	ldr	r3, [pc, #472]	; (800150c <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a75      	ldr	r2, [pc, #468]	; (800150c <HAL_RCC_OscConfig+0x240>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e01d      	b.n	800137c <HAL_RCC_OscConfig+0xb0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001348:	d10c      	bne.n	8001364 <HAL_RCC_OscConfig+0x98>
 800134a:	4b70      	ldr	r3, [pc, #448]	; (800150c <HAL_RCC_OscConfig+0x240>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a6f      	ldr	r2, [pc, #444]	; (800150c <HAL_RCC_OscConfig+0x240>)
 8001350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	4b6d      	ldr	r3, [pc, #436]	; (800150c <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a6c      	ldr	r2, [pc, #432]	; (800150c <HAL_RCC_OscConfig+0x240>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e00b      	b.n	800137c <HAL_RCC_OscConfig+0xb0>
 8001364:	4b69      	ldr	r3, [pc, #420]	; (800150c <HAL_RCC_OscConfig+0x240>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a68      	ldr	r2, [pc, #416]	; (800150c <HAL_RCC_OscConfig+0x240>)
 800136a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b66      	ldr	r3, [pc, #408]	; (800150c <HAL_RCC_OscConfig+0x240>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a65      	ldr	r2, [pc, #404]	; (800150c <HAL_RCC_OscConfig+0x240>)
 8001376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d013      	beq.n	80013ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fcbe 	bl	8000d04 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fcba 	bl	8000d04 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e207      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139e:	4b5b      	ldr	r3, [pc, #364]	; (800150c <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0xc0>
 80013aa:	e014      	b.n	80013d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fcaa 	bl	8000d04 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fca6 	bl	8000d04 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e1f3      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c6:	4b51      	ldr	r3, [pc, #324]	; (800150c <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0xe8>
 80013d2:	e000      	b.n	80013d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d063      	beq.n	80014aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e2:	4b4a      	ldr	r3, [pc, #296]	; (800150c <HAL_RCC_OscConfig+0x240>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00b      	beq.n	8001406 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ee:	4b47      	ldr	r3, [pc, #284]	; (800150c <HAL_RCC_OscConfig+0x240>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d11c      	bne.n	8001434 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fa:	4b44      	ldr	r3, [pc, #272]	; (800150c <HAL_RCC_OscConfig+0x240>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d116      	bne.n	8001434 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001406:	4b41      	ldr	r3, [pc, #260]	; (800150c <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d005      	beq.n	800141e <HAL_RCC_OscConfig+0x152>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d001      	beq.n	800141e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e1c7      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141e:	4b3b      	ldr	r3, [pc, #236]	; (800150c <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4937      	ldr	r1, [pc, #220]	; (800150c <HAL_RCC_OscConfig+0x240>)
 800142e:	4313      	orrs	r3, r2
 8001430:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001432:	e03a      	b.n	80014aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d020      	beq.n	800147e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800143c:	4b34      	ldr	r3, [pc, #208]	; (8001510 <HAL_RCC_OscConfig+0x244>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001442:	f7ff fc5f 	bl	8000d04 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144a:	f7ff fc5b 	bl	8000d04 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e1a8      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	4b2b      	ldr	r3, [pc, #172]	; (800150c <HAL_RCC_OscConfig+0x240>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001468:	4b28      	ldr	r3, [pc, #160]	; (800150c <HAL_RCC_OscConfig+0x240>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4925      	ldr	r1, [pc, #148]	; (800150c <HAL_RCC_OscConfig+0x240>)
 8001478:	4313      	orrs	r3, r2
 800147a:	600b      	str	r3, [r1, #0]
 800147c:	e015      	b.n	80014aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <HAL_RCC_OscConfig+0x244>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff fc3e 	bl	8000d04 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800148c:	f7ff fc3a 	bl	8000d04 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e187      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d036      	beq.n	8001524 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d016      	beq.n	80014ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_RCC_OscConfig+0x248>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c4:	f7ff fc1e 	bl	8000d04 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014cc:	f7ff fc1a 	bl	8000d04 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e167      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <HAL_RCC_OscConfig+0x240>)
 80014e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0x200>
 80014ea:	e01b      	b.n	8001524 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_RCC_OscConfig+0x248>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fc07 	bl	8000d04 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	e00e      	b.n	8001518 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fa:	f7ff fc03 	bl	8000d04 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d907      	bls.n	8001518 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e150      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
 800150c:	40023800 	.word	0x40023800
 8001510:	42470000 	.word	0x42470000
 8001514:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001518:	4b88      	ldr	r3, [pc, #544]	; (800173c <HAL_RCC_OscConfig+0x470>)
 800151a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1ea      	bne.n	80014fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 8097 	beq.w	8001660 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001536:	4b81      	ldr	r3, [pc, #516]	; (800173c <HAL_RCC_OscConfig+0x470>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10f      	bne.n	8001562 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	4b7d      	ldr	r3, [pc, #500]	; (800173c <HAL_RCC_OscConfig+0x470>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a7c      	ldr	r2, [pc, #496]	; (800173c <HAL_RCC_OscConfig+0x470>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b7a      	ldr	r3, [pc, #488]	; (800173c <HAL_RCC_OscConfig+0x470>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155e:	2301      	movs	r3, #1
 8001560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001562:	4b77      	ldr	r3, [pc, #476]	; (8001740 <HAL_RCC_OscConfig+0x474>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d118      	bne.n	80015a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156e:	4b74      	ldr	r3, [pc, #464]	; (8001740 <HAL_RCC_OscConfig+0x474>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a73      	ldr	r2, [pc, #460]	; (8001740 <HAL_RCC_OscConfig+0x474>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157a:	f7ff fbc3 	bl	8000d04 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001582:	f7ff fbbf 	bl	8000d04 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e10c      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001594:	4b6a      	ldr	r3, [pc, #424]	; (8001740 <HAL_RCC_OscConfig+0x474>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d106      	bne.n	80015b6 <HAL_RCC_OscConfig+0x2ea>
 80015a8:	4b64      	ldr	r3, [pc, #400]	; (800173c <HAL_RCC_OscConfig+0x470>)
 80015aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ac:	4a63      	ldr	r2, [pc, #396]	; (800173c <HAL_RCC_OscConfig+0x470>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6713      	str	r3, [r2, #112]	; 0x70
 80015b4:	e01c      	b.n	80015f0 <HAL_RCC_OscConfig+0x324>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b05      	cmp	r3, #5
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x30c>
 80015be:	4b5f      	ldr	r3, [pc, #380]	; (800173c <HAL_RCC_OscConfig+0x470>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	4a5e      	ldr	r2, [pc, #376]	; (800173c <HAL_RCC_OscConfig+0x470>)
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ca:	4b5c      	ldr	r3, [pc, #368]	; (800173c <HAL_RCC_OscConfig+0x470>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	4a5b      	ldr	r2, [pc, #364]	; (800173c <HAL_RCC_OscConfig+0x470>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6713      	str	r3, [r2, #112]	; 0x70
 80015d6:	e00b      	b.n	80015f0 <HAL_RCC_OscConfig+0x324>
 80015d8:	4b58      	ldr	r3, [pc, #352]	; (800173c <HAL_RCC_OscConfig+0x470>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	4a57      	ldr	r2, [pc, #348]	; (800173c <HAL_RCC_OscConfig+0x470>)
 80015de:	f023 0301 	bic.w	r3, r3, #1
 80015e2:	6713      	str	r3, [r2, #112]	; 0x70
 80015e4:	4b55      	ldr	r3, [pc, #340]	; (800173c <HAL_RCC_OscConfig+0x470>)
 80015e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e8:	4a54      	ldr	r2, [pc, #336]	; (800173c <HAL_RCC_OscConfig+0x470>)
 80015ea:	f023 0304 	bic.w	r3, r3, #4
 80015ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d015      	beq.n	8001624 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f8:	f7ff fb84 	bl	8000d04 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fe:	e00a      	b.n	8001616 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001600:	f7ff fb80 	bl	8000d04 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f241 3288 	movw	r2, #5000	; 0x1388
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e0cb      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001616:	4b49      	ldr	r3, [pc, #292]	; (800173c <HAL_RCC_OscConfig+0x470>)
 8001618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0ee      	beq.n	8001600 <HAL_RCC_OscConfig+0x334>
 8001622:	e014      	b.n	800164e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001624:	f7ff fb6e 	bl	8000d04 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162a:	e00a      	b.n	8001642 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162c:	f7ff fb6a 	bl	8000d04 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	; 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e0b5      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001642:	4b3e      	ldr	r3, [pc, #248]	; (800173c <HAL_RCC_OscConfig+0x470>)
 8001644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1ee      	bne.n	800162c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800164e:	7dfb      	ldrb	r3, [r7, #23]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d105      	bne.n	8001660 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001654:	4b39      	ldr	r3, [pc, #228]	; (800173c <HAL_RCC_OscConfig+0x470>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	4a38      	ldr	r2, [pc, #224]	; (800173c <HAL_RCC_OscConfig+0x470>)
 800165a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 80a1 	beq.w	80017ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800166a:	4b34      	ldr	r3, [pc, #208]	; (800173c <HAL_RCC_OscConfig+0x470>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b08      	cmp	r3, #8
 8001674:	d05c      	beq.n	8001730 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d141      	bne.n	8001702 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167e:	4b31      	ldr	r3, [pc, #196]	; (8001744 <HAL_RCC_OscConfig+0x478>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fb3e 	bl	8000d04 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168c:	f7ff fb3a 	bl	8000d04 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e087      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169e:	4b27      	ldr	r3, [pc, #156]	; (800173c <HAL_RCC_OscConfig+0x470>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69da      	ldr	r2, [r3, #28]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	019b      	lsls	r3, r3, #6
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	085b      	lsrs	r3, r3, #1
 80016c2:	3b01      	subs	r3, #1
 80016c4:	041b      	lsls	r3, r3, #16
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	061b      	lsls	r3, r3, #24
 80016ce:	491b      	ldr	r1, [pc, #108]	; (800173c <HAL_RCC_OscConfig+0x470>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_RCC_OscConfig+0x478>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff fb13 	bl	8000d04 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e2:	f7ff fb0f 	bl	8000d04 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e05c      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_RCC_OscConfig+0x470>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x416>
 8001700:	e054      	b.n	80017ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_RCC_OscConfig+0x478>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff fafc 	bl	8000d04 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff faf8 	bl	8000d04 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e045      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_RCC_OscConfig+0x470>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x444>
 800172e:	e03d      	b.n	80017ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d107      	bne.n	8001748 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e038      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
 800173c:	40023800 	.word	0x40023800
 8001740:	40007000 	.word	0x40007000
 8001744:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001748:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <HAL_RCC_OscConfig+0x4ec>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d028      	beq.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d121      	bne.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d11a      	bne.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001778:	4013      	ands	r3, r2
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800177e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001780:	4293      	cmp	r3, r2
 8001782:	d111      	bne.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	085b      	lsrs	r3, r3, #1
 8001790:	3b01      	subs	r3, #1
 8001792:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001794:	429a      	cmp	r2, r3
 8001796:	d107      	bne.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d001      	beq.n	80017ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800

080017bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0cc      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d0:	4b68      	ldr	r3, [pc, #416]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d90c      	bls.n	80017f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017de:	4b65      	ldr	r3, [pc, #404]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e6:	4b63      	ldr	r3, [pc, #396]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0b8      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d020      	beq.n	8001846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001810:	4b59      	ldr	r3, [pc, #356]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a58      	ldr	r2, [pc, #352]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800181a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001828:	4b53      	ldr	r3, [pc, #332]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a52      	ldr	r2, [pc, #328]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001834:	4b50      	ldr	r3, [pc, #320]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	494d      	ldr	r1, [pc, #308]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d044      	beq.n	80018dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b47      	ldr	r3, [pc, #284]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d119      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e07f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d003      	beq.n	800187a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001876:	2b03      	cmp	r3, #3
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187a:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e06f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188a:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e067      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f023 0203 	bic.w	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4934      	ldr	r1, [pc, #208]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018ac:	f7ff fa2a 	bl	8000d04 <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b4:	f7ff fa26 	bl	8000d04 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e04f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 020c 	and.w	r2, r3, #12
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	429a      	cmp	r2, r3
 80018da:	d1eb      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018dc:	4b25      	ldr	r3, [pc, #148]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d20c      	bcs.n	8001904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ea:	4b22      	ldr	r3, [pc, #136]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e032      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4916      	ldr	r1, [pc, #88]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d009      	beq.n	8001942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	490e      	ldr	r1, [pc, #56]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	4313      	orrs	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001942:	f000 f821 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 8001946:	4602      	mov	r2, r0
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	490a      	ldr	r1, [pc, #40]	; (800197c <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	5ccb      	ldrb	r3, [r1, r3]
 8001956:	fa22 f303 	lsr.w	r3, r2, r3
 800195a:	4a09      	ldr	r2, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f98a 	bl	8000c7c <HAL_InitTick>

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023c00 	.word	0x40023c00
 8001978:	40023800 	.word	0x40023800
 800197c:	080039f0 	.word	0x080039f0
 8001980:	20000000 	.word	0x20000000
 8001984:	20000004 	.word	0x20000004

08001988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800198c:	b094      	sub	sp, #80	; 0x50
 800198e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	647b      	str	r3, [r7, #68]	; 0x44
 8001994:	2300      	movs	r3, #0
 8001996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001998:	2300      	movs	r3, #0
 800199a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a0:	4b79      	ldr	r3, [pc, #484]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d00d      	beq.n	80019c8 <HAL_RCC_GetSysClockFreq+0x40>
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	f200 80e1 	bhi.w	8001b74 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x34>
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d003      	beq.n	80019c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019ba:	e0db      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019bc:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x204>)
 80019be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019c0:	e0db      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019c2:	4b73      	ldr	r3, [pc, #460]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x208>)
 80019c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019c6:	e0d8      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c8:	4b6f      	ldr	r3, [pc, #444]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d2:	4b6d      	ldr	r3, [pc, #436]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d063      	beq.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019de:	4b6a      	ldr	r3, [pc, #424]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	099b      	lsrs	r3, r3, #6
 80019e4:	2200      	movs	r2, #0
 80019e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80019e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f0:	633b      	str	r3, [r7, #48]	; 0x30
 80019f2:	2300      	movs	r3, #0
 80019f4:	637b      	str	r3, [r7, #52]	; 0x34
 80019f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019fa:	4622      	mov	r2, r4
 80019fc:	462b      	mov	r3, r5
 80019fe:	f04f 0000 	mov.w	r0, #0
 8001a02:	f04f 0100 	mov.w	r1, #0
 8001a06:	0159      	lsls	r1, r3, #5
 8001a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a0c:	0150      	lsls	r0, r2, #5
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4621      	mov	r1, r4
 8001a14:	1a51      	subs	r1, r2, r1
 8001a16:	6139      	str	r1, [r7, #16]
 8001a18:	4629      	mov	r1, r5
 8001a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a2c:	4659      	mov	r1, fp
 8001a2e:	018b      	lsls	r3, r1, #6
 8001a30:	4651      	mov	r1, sl
 8001a32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a36:	4651      	mov	r1, sl
 8001a38:	018a      	lsls	r2, r1, #6
 8001a3a:	4651      	mov	r1, sl
 8001a3c:	ebb2 0801 	subs.w	r8, r2, r1
 8001a40:	4659      	mov	r1, fp
 8001a42:	eb63 0901 	sbc.w	r9, r3, r1
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a5a:	4690      	mov	r8, r2
 8001a5c:	4699      	mov	r9, r3
 8001a5e:	4623      	mov	r3, r4
 8001a60:	eb18 0303 	adds.w	r3, r8, r3
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	462b      	mov	r3, r5
 8001a68:	eb49 0303 	adc.w	r3, r9, r3
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	024b      	lsls	r3, r1, #9
 8001a7e:	4621      	mov	r1, r4
 8001a80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a84:	4621      	mov	r1, r4
 8001a86:	024a      	lsls	r2, r1, #9
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8e:	2200      	movs	r2, #0
 8001a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a98:	f7fe fbfa 	bl	8000290 <__aeabi_uldivmod>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aa4:	e058      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aa6:	4b38      	ldr	r3, [pc, #224]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	099b      	lsrs	r3, r3, #6
 8001aac:	2200      	movs	r2, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ab6:	623b      	str	r3, [r7, #32]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
 8001abc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ac0:	4642      	mov	r2, r8
 8001ac2:	464b      	mov	r3, r9
 8001ac4:	f04f 0000 	mov.w	r0, #0
 8001ac8:	f04f 0100 	mov.w	r1, #0
 8001acc:	0159      	lsls	r1, r3, #5
 8001ace:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ad2:	0150      	lsls	r0, r2, #5
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4641      	mov	r1, r8
 8001ada:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ade:	4649      	mov	r1, r9
 8001ae0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001af0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001af4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001af8:	ebb2 040a 	subs.w	r4, r2, sl
 8001afc:	eb63 050b 	sbc.w	r5, r3, fp
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	00eb      	lsls	r3, r5, #3
 8001b0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b0e:	00e2      	lsls	r2, r4, #3
 8001b10:	4614      	mov	r4, r2
 8001b12:	461d      	mov	r5, r3
 8001b14:	4643      	mov	r3, r8
 8001b16:	18e3      	adds	r3, r4, r3
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	464b      	mov	r3, r9
 8001b1c:	eb45 0303 	adc.w	r3, r5, r3
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b2e:	4629      	mov	r1, r5
 8001b30:	028b      	lsls	r3, r1, #10
 8001b32:	4621      	mov	r1, r4
 8001b34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b38:	4621      	mov	r1, r4
 8001b3a:	028a      	lsls	r2, r1, #10
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b42:	2200      	movs	r2, #0
 8001b44:	61bb      	str	r3, [r7, #24]
 8001b46:	61fa      	str	r2, [r7, #28]
 8001b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b4c:	f7fe fba0 	bl	8000290 <__aeabi_uldivmod>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4613      	mov	r3, r2
 8001b56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	0c1b      	lsrs	r3, r3, #16
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	3301      	adds	r3, #1
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b72:	e002      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3750      	adds	r7, #80	; 0x50
 8001b80:	46bd      	mov	sp, r7
 8001b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	00f42400 	.word	0x00f42400
 8001b90:	007a1200 	.word	0x007a1200

08001b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000000 	.word	0x20000000

08001bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bb0:	f7ff fff0 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	0a9b      	lsrs	r3, r3, #10
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	4903      	ldr	r1, [pc, #12]	; (8001bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bc2:	5ccb      	ldrb	r3, [r1, r3]
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	08003a00 	.word	0x08003a00

08001bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bd8:	f7ff ffdc 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	0b5b      	lsrs	r3, r3, #13
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	4903      	ldr	r1, [pc, #12]	; (8001bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	08003a00 	.word	0x08003a00

08001bfc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d105      	bne.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d038      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c24:	4b68      	ldr	r3, [pc, #416]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c2a:	f7ff f86b 	bl	8000d04 <HAL_GetTick>
 8001c2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c32:	f7ff f867 	bl	8000d04 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e0bd      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c44:	4b61      	ldr	r3, [pc, #388]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f0      	bne.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	019b      	lsls	r3, r3, #6
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	071b      	lsls	r3, r3, #28
 8001c62:	495a      	ldr	r1, [pc, #360]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c6a:	4b57      	ldr	r3, [pc, #348]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c70:	f7ff f848 	bl	8000d04 <HAL_GetTick>
 8001c74:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c78:	f7ff f844 	bl	8000d04 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e09a      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c8a:	4b50      	ldr	r3, [pc, #320]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8083 	beq.w	8001daa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	4b48      	ldr	r3, [pc, #288]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	4a47      	ldr	r2, [pc, #284]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb4:	4b45      	ldr	r3, [pc, #276]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001cc0:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a42      	ldr	r2, [pc, #264]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cca:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ccc:	f7ff f81a 	bl	8000d04 <HAL_GetTick>
 8001cd0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001cd4:	f7ff f816 	bl	8000d04 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e06c      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ce6:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cf2:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfa:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d02f      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d028      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d10:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d18:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d1a:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d20:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001d26:	4a29      	ldr	r2, [pc, #164]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d2c:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d114      	bne.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001d38:	f7fe ffe4 	bl	8000d04 <HAL_GetTick>
 8001d3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d40:	f7fe ffe0 	bl	8000d04 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e034      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0ee      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d6e:	d10d      	bne.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d84:	4911      	ldr	r1, [pc, #68]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
 8001d8a:	e005      	b.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4a0e      	ldr	r2, [pc, #56]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d96:	6093      	str	r3, [r2, #8]
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da4:	4909      	ldr	r1, [pc, #36]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7d1a      	ldrb	r2, [r3, #20]
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001dbc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	42470068 	.word	0x42470068
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	42470e40 	.word	0x42470e40
 8001dd8:	424711e0 	.word	0x424711e0

08001ddc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e066      	b.n	8001ec0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	7f5b      	ldrb	r3, [r3, #29]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d105      	bne.n	8001e08 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe fe72 	bl	8000aec <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	22ca      	movs	r2, #202	; 0xca
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2253      	movs	r2, #83	; 0x53
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fc66 	bl	80026f0 <RTC_EnterInitMode>
 8001e24:	4603      	mov	r3, r0
 8001e26:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d12c      	bne.n	8001e88 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e40:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6899      	ldr	r1, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	68d2      	ldr	r2, [r2, #12]
 8001e68:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6919      	ldr	r1, [r3, #16]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	041a      	lsls	r2, r3, #16
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 fc6d 	bl	800275e <RTC_ExitInitMode>
 8001e84:	4603      	mov	r3, r0
 8001e86:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d113      	bne.n	8001eb6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699a      	ldr	r2, [r3, #24]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	22ff      	movs	r2, #255	; 0xff
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	7f1b      	ldrb	r3, [r3, #28]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_RTC_SetTime+0x1c>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e087      	b.n	8001ff4 <HAL_RTC_SetTime+0x12c>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2202      	movs	r2, #2
 8001eee:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d126      	bne.n	8001f44 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d102      	bne.n	8001f0a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2200      	movs	r2, #0
 8001f08:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 fc4a 	bl	80027a8 <RTC_ByteToBcd2>
 8001f14:	4603      	mov	r3, r0
 8001f16:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	785b      	ldrb	r3, [r3, #1]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 fc43 	bl	80027a8 <RTC_ByteToBcd2>
 8001f22:	4603      	mov	r3, r0
 8001f24:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f26:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	789b      	ldrb	r3, [r3, #2]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 fc3b 	bl	80027a8 <RTC_ByteToBcd2>
 8001f32:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f34:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	78db      	ldrb	r3, [r3, #3]
 8001f3c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	e018      	b.n	8001f76 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2200      	movs	r2, #0
 8001f56:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	785b      	ldrb	r3, [r3, #1]
 8001f62:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f64:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001f6a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	78db      	ldrb	r3, [r3, #3]
 8001f70:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f72:	4313      	orrs	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	22ca      	movs	r2, #202	; 0xca
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2253      	movs	r2, #83	; 0x53
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 fbb2 	bl	80026f0 <RTC_EnterInitMode>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8001f90:	7cfb      	ldrb	r3, [r7, #19]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d120      	bne.n	8001fd8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001fa0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001fa4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fb4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6899      	ldr	r1, [r3, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 fbc5 	bl	800275e <RTC_ExitInitMode>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8001fd8:	7cfb      	ldrb	r3, [r7, #19]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d102      	bne.n	8001fe4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	22ff      	movs	r2, #255	; 0xff
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	771a      	strb	r2, [r3, #28]

  return status;
 8001ff2:	7cfb      	ldrb	r3, [r7, #19]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	371c      	adds	r7, #28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd90      	pop	{r4, r7, pc}

08001ffc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800202e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002032:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	0c1b      	lsrs	r3, r3, #16
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800203e:	b2da      	uxtb	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	0a1b      	lsrs	r3, r3, #8
 8002048:	b2db      	uxtb	r3, r3
 800204a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800204e:	b2da      	uxtb	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800205c:	b2da      	uxtb	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	0d9b      	lsrs	r3, r3, #22
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	b2da      	uxtb	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d11a      	bne.n	80020ae <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f000 fbb0 	bl	80027e2 <RTC_Bcd2ToByte>
 8002082:	4603      	mov	r3, r0
 8002084:	461a      	mov	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	785b      	ldrb	r3, [r3, #1]
 800208e:	4618      	mov	r0, r3
 8002090:	f000 fba7 	bl	80027e2 <RTC_Bcd2ToByte>
 8002094:	4603      	mov	r3, r0
 8002096:	461a      	mov	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	789b      	ldrb	r3, [r3, #2]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fb9e 	bl	80027e2 <RTC_Bcd2ToByte>
 80020a6:	4603      	mov	r3, r0
 80020a8:	461a      	mov	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	7f1b      	ldrb	r3, [r3, #28]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_RTC_SetDate+0x1c>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e071      	b.n	80021b8 <HAL_RTC_SetDate+0x100>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2202      	movs	r2, #2
 80020de:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10e      	bne.n	8002104 <HAL_RTC_SetDate+0x4c>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	785b      	ldrb	r3, [r3, #1]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d008      	beq.n	8002104 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	785b      	ldrb	r3, [r3, #1]
 80020f6:	f023 0310 	bic.w	r3, r3, #16
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	330a      	adds	r3, #10
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d11c      	bne.n	8002144 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	78db      	ldrb	r3, [r3, #3]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 fb4a 	bl	80027a8 <RTC_ByteToBcd2>
 8002114:	4603      	mov	r3, r0
 8002116:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	785b      	ldrb	r3, [r3, #1]
 800211c:	4618      	mov	r0, r3
 800211e:	f000 fb43 	bl	80027a8 <RTC_ByteToBcd2>
 8002122:	4603      	mov	r3, r0
 8002124:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002126:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	789b      	ldrb	r3, [r3, #2]
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fb3b 	bl	80027a8 <RTC_ByteToBcd2>
 8002132:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002134:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	e00e      	b.n	8002162 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	78db      	ldrb	r3, [r3, #3]
 8002148:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	785b      	ldrb	r3, [r3, #1]
 800214e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002150:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002156:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800215e:	4313      	orrs	r3, r2
 8002160:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	22ca      	movs	r2, #202	; 0xca
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2253      	movs	r2, #83	; 0x53
 8002170:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 fabc 	bl	80026f0 <RTC_EnterInitMode>
 8002178:	4603      	mov	r3, r0
 800217a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800217c:	7cfb      	ldrb	r3, [r7, #19]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10c      	bne.n	800219c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800218c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002190:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 fae3 	bl	800275e <RTC_ExitInitMode>
 8002198:	4603      	mov	r3, r0
 800219a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d102      	bne.n	80021a8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	22ff      	movs	r2, #255	; 0xff
 80021ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	771a      	strb	r2, [r3, #28]

  return status;
 80021b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	371c      	adds	r7, #28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd90      	pop	{r4, r7, pc}

080021c0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80021de:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	0c1b      	lsrs	r3, r3, #16
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002202:	b2da      	uxtb	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	0b5b      	lsrs	r3, r3, #13
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	b2da      	uxtb	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d11a      	bne.n	8002254 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	78db      	ldrb	r3, [r3, #3]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fadd 	bl	80027e2 <RTC_Bcd2ToByte>
 8002228:	4603      	mov	r3, r0
 800222a:	461a      	mov	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	785b      	ldrb	r3, [r3, #1]
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fad4 	bl	80027e2 <RTC_Bcd2ToByte>
 800223a:	4603      	mov	r3, r0
 800223c:	461a      	mov	r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	789b      	ldrb	r3, [r3, #2]
 8002246:	4618      	mov	r0, r3
 8002248:	f000 facb 	bl	80027e2 <RTC_Bcd2ToByte>
 800224c:	4603      	mov	r3, r0
 800224e:	461a      	mov	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800226c:	4b9a      	ldr	r3, [pc, #616]	; (80024d8 <HAL_RTC_SetAlarm_IT+0x278>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a9a      	ldr	r2, [pc, #616]	; (80024dc <HAL_RTC_SetAlarm_IT+0x27c>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	0adb      	lsrs	r3, r3, #11
 8002278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800227c:	fb02 f303 	mul.w	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	7f1b      	ldrb	r3, [r3, #28]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_RTC_SetAlarm_IT+0x36>
 8002292:	2302      	movs	r3, #2
 8002294:	e11c      	b.n	80024d0 <HAL_RTC_SetAlarm_IT+0x270>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2202      	movs	r2, #2
 80022a0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d137      	bne.n	8002318 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d102      	bne.n	80022bc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2200      	movs	r2, #0
 80022ba:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fa71 	bl	80027a8 <RTC_ByteToBcd2>
 80022c6:	4603      	mov	r3, r0
 80022c8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	785b      	ldrb	r3, [r3, #1]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fa6a 	bl	80027a8 <RTC_ByteToBcd2>
 80022d4:	4603      	mov	r3, r0
 80022d6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80022d8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	789b      	ldrb	r3, [r3, #2]
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fa62 	bl	80027a8 <RTC_ByteToBcd2>
 80022e4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80022e6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	78db      	ldrb	r3, [r3, #3]
 80022ee:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80022f0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fa54 	bl	80027a8 <RTC_ByteToBcd2>
 8002300:	4603      	mov	r3, r0
 8002302:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002304:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800230c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002312:	4313      	orrs	r3, r2
 8002314:	61fb      	str	r3, [r7, #28]
 8002316:	e023      	b.n	8002360 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	d102      	bne.n	800232c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2200      	movs	r2, #0
 800232a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	785b      	ldrb	r3, [r3, #1]
 8002336:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002338:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800233e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	78db      	ldrb	r3, [r3, #3]
 8002344:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002346:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800234e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002350:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002356:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800235c:	4313      	orrs	r3, r2
 800235e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	22ca      	movs	r2, #202	; 0xca
 8002372:	625a      	str	r2, [r3, #36]	; 0x24
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2253      	movs	r2, #83	; 0x53
 800237a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002384:	d141      	bne.n	800240a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002394:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80023a6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	1e5a      	subs	r2, r3, #1
 80023ac:	617a      	str	r2, [r7, #20]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10b      	bne.n	80023ca <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	22ff      	movs	r2, #255	; 0xff
 80023b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2203      	movs	r2, #3
 80023be:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e082      	b.n	80024d0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0e7      	beq.n	80023a8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023f6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	e04b      	b.n	80024a2 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002418:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f462 7220 	orn	r2, r2, #640	; 0x280
 800242a:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800242c:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <HAL_RTC_SetAlarm_IT+0x278>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a2a      	ldr	r2, [pc, #168]	; (80024dc <HAL_RTC_SetAlarm_IT+0x27c>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	0adb      	lsrs	r3, r3, #11
 8002438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800243c:	fb02 f303 	mul.w	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	1e5a      	subs	r2, r3, #1
 8002446:	617a      	str	r2, [r7, #20]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10b      	bne.n	8002464 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	22ff      	movs	r2, #255	; 0xff
 8002452:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2203      	movs	r2, #3
 8002458:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e035      	b.n	80024d0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0e7      	beq.n	8002442 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002490:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024a0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_RTC_SetAlarm_IT+0x280>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <HAL_RTC_SetAlarm_IT+0x280>)
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ac:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <HAL_RTC_SetAlarm_IT+0x280>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <HAL_RTC_SetAlarm_IT+0x280>)
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	22ff      	movs	r2, #255	; 0xff
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3724      	adds	r7, #36	; 0x24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd90      	pop	{r4, r7, pc}
 80024d8:	20000000 	.word	0x20000000
 80024dc:	10624dd3 	.word	0x10624dd3
 80024e0:	40013c00 	.word	0x40013c00

080024e4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7f1b      	ldrb	r3, [r3, #28]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_RTC_DeactivateAlarm+0x1a>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e07b      	b.n	80025f6 <HAL_RTC_DeactivateAlarm+0x112>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	22ca      	movs	r2, #202	; 0xca
 8002510:	625a      	str	r2, [r3, #36]	; 0x24
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2253      	movs	r2, #83	; 0x53
 8002518:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002520:	d12f      	bne.n	8002582 <HAL_RTC_DeactivateAlarm+0x9e>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002530:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002540:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002542:	f7fe fbdf 	bl	8000d04 <HAL_GetTick>
 8002546:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002548:	e013      	b.n	8002572 <HAL_RTC_DeactivateAlarm+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800254a:	f7fe fbdb 	bl	8000d04 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002558:	d90b      	bls.n	8002572 <HAL_RTC_DeactivateAlarm+0x8e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	22ff      	movs	r2, #255	; 0xff
 8002560:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2203      	movs	r2, #3
 8002566:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e041      	b.n	80025f6 <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0e4      	beq.n	800254a <HAL_RTC_DeactivateAlarm+0x66>
 8002580:	e02e      	b.n	80025e0 <HAL_RTC_DeactivateAlarm+0xfc>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002590:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025a0:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025a2:	f7fe fbaf 	bl	8000d04 <HAL_GetTick>
 80025a6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80025a8:	e013      	b.n	80025d2 <HAL_RTC_DeactivateAlarm+0xee>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80025aa:	f7fe fbab 	bl	8000d04 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025b8:	d90b      	bls.n	80025d2 <HAL_RTC_DeactivateAlarm+0xee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	22ff      	movs	r2, #255	; 0xff
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2203      	movs	r2, #3
 80025c6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e011      	b.n	80025f6 <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0e4      	beq.n	80025aa <HAL_RTC_DeactivateAlarm+0xc6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	22ff      	movs	r2, #255	; 0xff
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d012      	beq.n	800263c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00b      	beq.n	800263c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f831 	bl	800268c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800263a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d012      	beq.n	8002670 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00b      	beq.n	8002670 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f8de 	bl	800281a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800266e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002672:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002676:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	775a      	strb	r2, [r3, #29]
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40013c00 	.word	0x40013c00

0800268c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026ba:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026bc:	f7fe fb22 	bl	8000d04 <HAL_GetTick>
 80026c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80026c2:	e009      	b.n	80026d8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80026c4:	f7fe fb1e 	bl	8000d04 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026d2:	d901      	bls.n	80026d8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e007      	b.n	80026e8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0ee      	beq.n	80026c4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	2b00      	cmp	r3, #0
 800270c:	d122      	bne.n	8002754 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800271c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800271e:	f7fe faf1 	bl	8000d04 <HAL_GetTick>
 8002722:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002724:	e00c      	b.n	8002740 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002726:	f7fe faed 	bl	8000d04 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002734:	d904      	bls.n	8002740 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2204      	movs	r2, #4
 800273a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d102      	bne.n	8002754 <RTC_EnterInitMode+0x64>
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d1e8      	bne.n	8002726 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002754:	7bfb      	ldrb	r3, [r7, #15]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002778:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0320 	and.w	r3, r3, #32
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10a      	bne.n	800279e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff89 	bl	80026a0 <HAL_RTC_WaitForSynchro>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d004      	beq.n	800279e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2204      	movs	r2, #4
 8002798:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80027b6:	e005      	b.n	80027c4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	3301      	adds	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	3b0a      	subs	r3, #10
 80027c2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	2b09      	cmp	r3, #9
 80027c8:	d8f6      	bhi.n	80027b8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	b2db      	uxtb	r3, r3
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	0092      	lsls	r2, r2, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	b2da      	uxtb	r2, r3
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	4413      	add	r3, r2
 800280c:	b2db      	uxtb	r3, r3
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e03f      	b.n	80028c0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d106      	bne.n	800285a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7fe f901 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2224      	movs	r2, #36	; 0x24
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002870:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f928 	bl	8002ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002886:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002896:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	; 0x28
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	4613      	mov	r3, r2
 80028d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d17c      	bne.n	80029e2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <HAL_UART_Transmit+0x2c>
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e075      	b.n	80029e4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_UART_Transmit+0x3e>
 8002902:	2302      	movs	r3, #2
 8002904:	e06e      	b.n	80029e4 <HAL_UART_Transmit+0x11c>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2221      	movs	r2, #33	; 0x21
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800291c:	f7fe f9f2 	bl	8000d04 <HAL_GetTick>
 8002920:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	88fa      	ldrh	r2, [r7, #6]
 8002926:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	88fa      	ldrh	r2, [r7, #6]
 800292c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002936:	d108      	bne.n	800294a <HAL_UART_Transmit+0x82>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d104      	bne.n	800294a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	61bb      	str	r3, [r7, #24]
 8002948:	e003      	b.n	8002952 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800295a:	e02a      	b.n	80029b2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2200      	movs	r2, #0
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f840 	bl	80029ec <UART_WaitOnFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e036      	b.n	80029e4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10b      	bne.n	8002994 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800298a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	3302      	adds	r3, #2
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	e007      	b.n	80029a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	781a      	ldrb	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3301      	adds	r3, #1
 80029a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1cf      	bne.n	800295c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2200      	movs	r2, #0
 80029c4:	2140      	movs	r1, #64	; 0x40
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f810 	bl	80029ec <UART_WaitOnFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e006      	b.n	80029e4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b090      	sub	sp, #64	; 0x40
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029fc:	e050      	b.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a04:	d04c      	beq.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8002a0c:	f7fe f97a 	bl	8000d04 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d241      	bcs.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	330c      	adds	r3, #12
 8002a22:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	e853 3f00 	ldrex	r3, [r3]
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	330c      	adds	r3, #12
 8002a3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a3c:	637a      	str	r2, [r7, #52]	; 0x34
 8002a3e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a44:	e841 2300 	strex	r3, r2, [r1]
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1e5      	bne.n	8002a1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3314      	adds	r3, #20
 8002a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	e853 3f00 	ldrex	r3, [r3]
 8002a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f023 0301 	bic.w	r3, r3, #1
 8002a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	3314      	adds	r3, #20
 8002a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a70:	623a      	str	r2, [r7, #32]
 8002a72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a74:	69f9      	ldr	r1, [r7, #28]
 8002a76:	6a3a      	ldr	r2, [r7, #32]
 8002a78:	e841 2300 	strex	r3, r2, [r1]
 8002a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e5      	bne.n	8002a50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e00f      	b.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d09f      	beq.n	80029fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3740      	adds	r7, #64	; 0x40
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002acc:	b0c0      	sub	sp, #256	; 0x100
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae4:	68d9      	ldr	r1, [r3, #12]
 8002ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	ea40 0301 	orr.w	r3, r0, r1
 8002af0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b20:	f021 010c 	bic.w	r1, r1, #12
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b42:	6999      	ldr	r1, [r3, #24]
 8002b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	ea40 0301 	orr.w	r3, r0, r1
 8002b4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4b8f      	ldr	r3, [pc, #572]	; (8002d94 <UART_SetConfig+0x2cc>)
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d005      	beq.n	8002b68 <UART_SetConfig+0xa0>
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	4b8d      	ldr	r3, [pc, #564]	; (8002d98 <UART_SetConfig+0x2d0>)
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d104      	bne.n	8002b72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b68:	f7ff f834 	bl	8001bd4 <HAL_RCC_GetPCLK2Freq>
 8002b6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b70:	e003      	b.n	8002b7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b72:	f7ff f81b 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 8002b76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b84:	f040 810c 	bne.w	8002da0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b9a:	4622      	mov	r2, r4
 8002b9c:	462b      	mov	r3, r5
 8002b9e:	1891      	adds	r1, r2, r2
 8002ba0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ba2:	415b      	adcs	r3, r3
 8002ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ba6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002baa:	4621      	mov	r1, r4
 8002bac:	eb12 0801 	adds.w	r8, r2, r1
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	eb43 0901 	adc.w	r9, r3, r1
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bca:	4690      	mov	r8, r2
 8002bcc:	4699      	mov	r9, r3
 8002bce:	4623      	mov	r3, r4
 8002bd0:	eb18 0303 	adds.w	r3, r8, r3
 8002bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bd8:	462b      	mov	r3, r5
 8002bda:	eb49 0303 	adc.w	r3, r9, r3
 8002bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002bf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	18db      	adds	r3, r3, r3
 8002bfa:	653b      	str	r3, [r7, #80]	; 0x50
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	eb42 0303 	adc.w	r3, r2, r3
 8002c02:	657b      	str	r3, [r7, #84]	; 0x54
 8002c04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c0c:	f7fd fb40 	bl	8000290 <__aeabi_uldivmod>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4b61      	ldr	r3, [pc, #388]	; (8002d9c <UART_SetConfig+0x2d4>)
 8002c16:	fba3 2302 	umull	r2, r3, r3, r2
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	011c      	lsls	r4, r3, #4
 8002c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c22:	2200      	movs	r2, #0
 8002c24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c30:	4642      	mov	r2, r8
 8002c32:	464b      	mov	r3, r9
 8002c34:	1891      	adds	r1, r2, r2
 8002c36:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c38:	415b      	adcs	r3, r3
 8002c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c40:	4641      	mov	r1, r8
 8002c42:	eb12 0a01 	adds.w	sl, r2, r1
 8002c46:	4649      	mov	r1, r9
 8002c48:	eb43 0b01 	adc.w	fp, r3, r1
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c60:	4692      	mov	sl, r2
 8002c62:	469b      	mov	fp, r3
 8002c64:	4643      	mov	r3, r8
 8002c66:	eb1a 0303 	adds.w	r3, sl, r3
 8002c6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c6e:	464b      	mov	r3, r9
 8002c70:	eb4b 0303 	adc.w	r3, fp, r3
 8002c74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	18db      	adds	r3, r3, r3
 8002c90:	643b      	str	r3, [r7, #64]	; 0x40
 8002c92:	4613      	mov	r3, r2
 8002c94:	eb42 0303 	adc.w	r3, r2, r3
 8002c98:	647b      	str	r3, [r7, #68]	; 0x44
 8002c9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ca2:	f7fd faf5 	bl	8000290 <__aeabi_uldivmod>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4611      	mov	r1, r2
 8002cac:	4b3b      	ldr	r3, [pc, #236]	; (8002d9c <UART_SetConfig+0x2d4>)
 8002cae:	fba3 2301 	umull	r2, r3, r3, r1
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	2264      	movs	r2, #100	; 0x64
 8002cb6:	fb02 f303 	mul.w	r3, r2, r3
 8002cba:	1acb      	subs	r3, r1, r3
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cc2:	4b36      	ldr	r3, [pc, #216]	; (8002d9c <UART_SetConfig+0x2d4>)
 8002cc4:	fba3 2302 	umull	r2, r3, r3, r2
 8002cc8:	095b      	lsrs	r3, r3, #5
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cd0:	441c      	add	r4, r3
 8002cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ce0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ce4:	4642      	mov	r2, r8
 8002ce6:	464b      	mov	r3, r9
 8002ce8:	1891      	adds	r1, r2, r2
 8002cea:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cec:	415b      	adcs	r3, r3
 8002cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002cf4:	4641      	mov	r1, r8
 8002cf6:	1851      	adds	r1, r2, r1
 8002cf8:	6339      	str	r1, [r7, #48]	; 0x30
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	414b      	adcs	r3, r1
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d0c:	4659      	mov	r1, fp
 8002d0e:	00cb      	lsls	r3, r1, #3
 8002d10:	4651      	mov	r1, sl
 8002d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d16:	4651      	mov	r1, sl
 8002d18:	00ca      	lsls	r2, r1, #3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4642      	mov	r2, r8
 8002d22:	189b      	adds	r3, r3, r2
 8002d24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d28:	464b      	mov	r3, r9
 8002d2a:	460a      	mov	r2, r1
 8002d2c:	eb42 0303 	adc.w	r3, r2, r3
 8002d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d48:	460b      	mov	r3, r1
 8002d4a:	18db      	adds	r3, r3, r3
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d4e:	4613      	mov	r3, r2
 8002d50:	eb42 0303 	adc.w	r3, r2, r3
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d5e:	f7fd fa97 	bl	8000290 <__aeabi_uldivmod>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <UART_SetConfig+0x2d4>)
 8002d68:	fba3 1302 	umull	r1, r3, r3, r2
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	2164      	movs	r1, #100	; 0x64
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	3332      	adds	r3, #50	; 0x32
 8002d7a:	4a08      	ldr	r2, [pc, #32]	; (8002d9c <UART_SetConfig+0x2d4>)
 8002d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	f003 0207 	and.w	r2, r3, #7
 8002d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4422      	add	r2, r4
 8002d8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d90:	e105      	b.n	8002f9e <UART_SetConfig+0x4d6>
 8002d92:	bf00      	nop
 8002d94:	40011000 	.word	0x40011000
 8002d98:	40011400 	.word	0x40011400
 8002d9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da4:	2200      	movs	r2, #0
 8002da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002daa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002db2:	4642      	mov	r2, r8
 8002db4:	464b      	mov	r3, r9
 8002db6:	1891      	adds	r1, r2, r2
 8002db8:	6239      	str	r1, [r7, #32]
 8002dba:	415b      	adcs	r3, r3
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dc2:	4641      	mov	r1, r8
 8002dc4:	1854      	adds	r4, r2, r1
 8002dc6:	4649      	mov	r1, r9
 8002dc8:	eb43 0501 	adc.w	r5, r3, r1
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	00eb      	lsls	r3, r5, #3
 8002dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dda:	00e2      	lsls	r2, r4, #3
 8002ddc:	4614      	mov	r4, r2
 8002dde:	461d      	mov	r5, r3
 8002de0:	4643      	mov	r3, r8
 8002de2:	18e3      	adds	r3, r4, r3
 8002de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002de8:	464b      	mov	r3, r9
 8002dea:	eb45 0303 	adc.w	r3, r5, r3
 8002dee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002dfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e0e:	4629      	mov	r1, r5
 8002e10:	008b      	lsls	r3, r1, #2
 8002e12:	4621      	mov	r1, r4
 8002e14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e18:	4621      	mov	r1, r4
 8002e1a:	008a      	lsls	r2, r1, #2
 8002e1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e20:	f7fd fa36 	bl	8000290 <__aeabi_uldivmod>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4b60      	ldr	r3, [pc, #384]	; (8002fac <UART_SetConfig+0x4e4>)
 8002e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	011c      	lsls	r4, r3, #4
 8002e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e36:	2200      	movs	r2, #0
 8002e38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e44:	4642      	mov	r2, r8
 8002e46:	464b      	mov	r3, r9
 8002e48:	1891      	adds	r1, r2, r2
 8002e4a:	61b9      	str	r1, [r7, #24]
 8002e4c:	415b      	adcs	r3, r3
 8002e4e:	61fb      	str	r3, [r7, #28]
 8002e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e54:	4641      	mov	r1, r8
 8002e56:	1851      	adds	r1, r2, r1
 8002e58:	6139      	str	r1, [r7, #16]
 8002e5a:	4649      	mov	r1, r9
 8002e5c:	414b      	adcs	r3, r1
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e6c:	4659      	mov	r1, fp
 8002e6e:	00cb      	lsls	r3, r1, #3
 8002e70:	4651      	mov	r1, sl
 8002e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e76:	4651      	mov	r1, sl
 8002e78:	00ca      	lsls	r2, r1, #3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4642      	mov	r2, r8
 8002e82:	189b      	adds	r3, r3, r2
 8002e84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e88:	464b      	mov	r3, r9
 8002e8a:	460a      	mov	r2, r1
 8002e8c:	eb42 0303 	adc.w	r3, r2, r3
 8002e90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002eac:	4649      	mov	r1, r9
 8002eae:	008b      	lsls	r3, r1, #2
 8002eb0:	4641      	mov	r1, r8
 8002eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eb6:	4641      	mov	r1, r8
 8002eb8:	008a      	lsls	r2, r1, #2
 8002eba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ebe:	f7fd f9e7 	bl	8000290 <__aeabi_uldivmod>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4b39      	ldr	r3, [pc, #228]	; (8002fac <UART_SetConfig+0x4e4>)
 8002ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	2164      	movs	r1, #100	; 0x64
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	3332      	adds	r3, #50	; 0x32
 8002eda:	4a34      	ldr	r2, [pc, #208]	; (8002fac <UART_SetConfig+0x4e4>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ee6:	441c      	add	r4, r3
 8002ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eec:	2200      	movs	r2, #0
 8002eee:	673b      	str	r3, [r7, #112]	; 0x70
 8002ef0:	677a      	str	r2, [r7, #116]	; 0x74
 8002ef2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ef6:	4642      	mov	r2, r8
 8002ef8:	464b      	mov	r3, r9
 8002efa:	1891      	adds	r1, r2, r2
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	415b      	adcs	r3, r3
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f06:	4641      	mov	r1, r8
 8002f08:	1851      	adds	r1, r2, r1
 8002f0a:	6039      	str	r1, [r7, #0]
 8002f0c:	4649      	mov	r1, r9
 8002f0e:	414b      	adcs	r3, r1
 8002f10:	607b      	str	r3, [r7, #4]
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f1e:	4659      	mov	r1, fp
 8002f20:	00cb      	lsls	r3, r1, #3
 8002f22:	4651      	mov	r1, sl
 8002f24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f28:	4651      	mov	r1, sl
 8002f2a:	00ca      	lsls	r2, r1, #3
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4603      	mov	r3, r0
 8002f32:	4642      	mov	r2, r8
 8002f34:	189b      	adds	r3, r3, r2
 8002f36:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f38:	464b      	mov	r3, r9
 8002f3a:	460a      	mov	r2, r1
 8002f3c:	eb42 0303 	adc.w	r3, r2, r3
 8002f40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f4c:	667a      	str	r2, [r7, #100]	; 0x64
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f5a:	4649      	mov	r1, r9
 8002f5c:	008b      	lsls	r3, r1, #2
 8002f5e:	4641      	mov	r1, r8
 8002f60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f64:	4641      	mov	r1, r8
 8002f66:	008a      	lsls	r2, r1, #2
 8002f68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f6c:	f7fd f990 	bl	8000290 <__aeabi_uldivmod>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <UART_SetConfig+0x4e4>)
 8002f76:	fba3 1302 	umull	r1, r3, r3, r2
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	2164      	movs	r1, #100	; 0x64
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	3332      	adds	r3, #50	; 0x32
 8002f88:	4a08      	ldr	r2, [pc, #32]	; (8002fac <UART_SetConfig+0x4e4>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	f003 020f 	and.w	r2, r3, #15
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4422      	add	r2, r4
 8002f9c:	609a      	str	r2, [r3, #8]
}
 8002f9e:	bf00      	nop
 8002fa0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002faa:	bf00      	nop
 8002fac:	51eb851f 	.word	0x51eb851f

08002fb0 <__errno>:
 8002fb0:	4b01      	ldr	r3, [pc, #4]	; (8002fb8 <__errno+0x8>)
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	2000000c 	.word	0x2000000c

08002fbc <__libc_init_array>:
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	4d0d      	ldr	r5, [pc, #52]	; (8002ff4 <__libc_init_array+0x38>)
 8002fc0:	4c0d      	ldr	r4, [pc, #52]	; (8002ff8 <__libc_init_array+0x3c>)
 8002fc2:	1b64      	subs	r4, r4, r5
 8002fc4:	10a4      	asrs	r4, r4, #2
 8002fc6:	2600      	movs	r6, #0
 8002fc8:	42a6      	cmp	r6, r4
 8002fca:	d109      	bne.n	8002fe0 <__libc_init_array+0x24>
 8002fcc:	4d0b      	ldr	r5, [pc, #44]	; (8002ffc <__libc_init_array+0x40>)
 8002fce:	4c0c      	ldr	r4, [pc, #48]	; (8003000 <__libc_init_array+0x44>)
 8002fd0:	f000 fc8e 	bl	80038f0 <_init>
 8002fd4:	1b64      	subs	r4, r4, r5
 8002fd6:	10a4      	asrs	r4, r4, #2
 8002fd8:	2600      	movs	r6, #0
 8002fda:	42a6      	cmp	r6, r4
 8002fdc:	d105      	bne.n	8002fea <__libc_init_array+0x2e>
 8002fde:	bd70      	pop	{r4, r5, r6, pc}
 8002fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe4:	4798      	blx	r3
 8002fe6:	3601      	adds	r6, #1
 8002fe8:	e7ee      	b.n	8002fc8 <__libc_init_array+0xc>
 8002fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fee:	4798      	blx	r3
 8002ff0:	3601      	adds	r6, #1
 8002ff2:	e7f2      	b.n	8002fda <__libc_init_array+0x1e>
 8002ff4:	08003a44 	.word	0x08003a44
 8002ff8:	08003a44 	.word	0x08003a44
 8002ffc:	08003a44 	.word	0x08003a44
 8003000:	08003a48 	.word	0x08003a48

08003004 <memset>:
 8003004:	4402      	add	r2, r0
 8003006:	4603      	mov	r3, r0
 8003008:	4293      	cmp	r3, r2
 800300a:	d100      	bne.n	800300e <memset+0xa>
 800300c:	4770      	bx	lr
 800300e:	f803 1b01 	strb.w	r1, [r3], #1
 8003012:	e7f9      	b.n	8003008 <memset+0x4>

08003014 <_vsiprintf_r>:
 8003014:	b500      	push	{lr}
 8003016:	b09b      	sub	sp, #108	; 0x6c
 8003018:	9100      	str	r1, [sp, #0]
 800301a:	9104      	str	r1, [sp, #16]
 800301c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003020:	9105      	str	r1, [sp, #20]
 8003022:	9102      	str	r1, [sp, #8]
 8003024:	4905      	ldr	r1, [pc, #20]	; (800303c <_vsiprintf_r+0x28>)
 8003026:	9103      	str	r1, [sp, #12]
 8003028:	4669      	mov	r1, sp
 800302a:	f000 f86f 	bl	800310c <_svfiprintf_r>
 800302e:	9b00      	ldr	r3, [sp, #0]
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
 8003034:	b01b      	add	sp, #108	; 0x6c
 8003036:	f85d fb04 	ldr.w	pc, [sp], #4
 800303a:	bf00      	nop
 800303c:	ffff0208 	.word	0xffff0208

08003040 <vsiprintf>:
 8003040:	4613      	mov	r3, r2
 8003042:	460a      	mov	r2, r1
 8003044:	4601      	mov	r1, r0
 8003046:	4802      	ldr	r0, [pc, #8]	; (8003050 <vsiprintf+0x10>)
 8003048:	6800      	ldr	r0, [r0, #0]
 800304a:	f7ff bfe3 	b.w	8003014 <_vsiprintf_r>
 800304e:	bf00      	nop
 8003050:	2000000c 	.word	0x2000000c

08003054 <__ssputs_r>:
 8003054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003058:	688e      	ldr	r6, [r1, #8]
 800305a:	429e      	cmp	r6, r3
 800305c:	4682      	mov	sl, r0
 800305e:	460c      	mov	r4, r1
 8003060:	4690      	mov	r8, r2
 8003062:	461f      	mov	r7, r3
 8003064:	d838      	bhi.n	80030d8 <__ssputs_r+0x84>
 8003066:	898a      	ldrh	r2, [r1, #12]
 8003068:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800306c:	d032      	beq.n	80030d4 <__ssputs_r+0x80>
 800306e:	6825      	ldr	r5, [r4, #0]
 8003070:	6909      	ldr	r1, [r1, #16]
 8003072:	eba5 0901 	sub.w	r9, r5, r1
 8003076:	6965      	ldr	r5, [r4, #20]
 8003078:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800307c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003080:	3301      	adds	r3, #1
 8003082:	444b      	add	r3, r9
 8003084:	106d      	asrs	r5, r5, #1
 8003086:	429d      	cmp	r5, r3
 8003088:	bf38      	it	cc
 800308a:	461d      	movcc	r5, r3
 800308c:	0553      	lsls	r3, r2, #21
 800308e:	d531      	bpl.n	80030f4 <__ssputs_r+0xa0>
 8003090:	4629      	mov	r1, r5
 8003092:	f000 fb63 	bl	800375c <_malloc_r>
 8003096:	4606      	mov	r6, r0
 8003098:	b950      	cbnz	r0, 80030b0 <__ssputs_r+0x5c>
 800309a:	230c      	movs	r3, #12
 800309c:	f8ca 3000 	str.w	r3, [sl]
 80030a0:	89a3      	ldrh	r3, [r4, #12]
 80030a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030a6:	81a3      	strh	r3, [r4, #12]
 80030a8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030b0:	6921      	ldr	r1, [r4, #16]
 80030b2:	464a      	mov	r2, r9
 80030b4:	f000 fabe 	bl	8003634 <memcpy>
 80030b8:	89a3      	ldrh	r3, [r4, #12]
 80030ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c2:	81a3      	strh	r3, [r4, #12]
 80030c4:	6126      	str	r6, [r4, #16]
 80030c6:	6165      	str	r5, [r4, #20]
 80030c8:	444e      	add	r6, r9
 80030ca:	eba5 0509 	sub.w	r5, r5, r9
 80030ce:	6026      	str	r6, [r4, #0]
 80030d0:	60a5      	str	r5, [r4, #8]
 80030d2:	463e      	mov	r6, r7
 80030d4:	42be      	cmp	r6, r7
 80030d6:	d900      	bls.n	80030da <__ssputs_r+0x86>
 80030d8:	463e      	mov	r6, r7
 80030da:	6820      	ldr	r0, [r4, #0]
 80030dc:	4632      	mov	r2, r6
 80030de:	4641      	mov	r1, r8
 80030e0:	f000 fab6 	bl	8003650 <memmove>
 80030e4:	68a3      	ldr	r3, [r4, #8]
 80030e6:	1b9b      	subs	r3, r3, r6
 80030e8:	60a3      	str	r3, [r4, #8]
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	4433      	add	r3, r6
 80030ee:	6023      	str	r3, [r4, #0]
 80030f0:	2000      	movs	r0, #0
 80030f2:	e7db      	b.n	80030ac <__ssputs_r+0x58>
 80030f4:	462a      	mov	r2, r5
 80030f6:	f000 fba5 	bl	8003844 <_realloc_r>
 80030fa:	4606      	mov	r6, r0
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d1e1      	bne.n	80030c4 <__ssputs_r+0x70>
 8003100:	6921      	ldr	r1, [r4, #16]
 8003102:	4650      	mov	r0, sl
 8003104:	f000 fabe 	bl	8003684 <_free_r>
 8003108:	e7c7      	b.n	800309a <__ssputs_r+0x46>
	...

0800310c <_svfiprintf_r>:
 800310c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003110:	4698      	mov	r8, r3
 8003112:	898b      	ldrh	r3, [r1, #12]
 8003114:	061b      	lsls	r3, r3, #24
 8003116:	b09d      	sub	sp, #116	; 0x74
 8003118:	4607      	mov	r7, r0
 800311a:	460d      	mov	r5, r1
 800311c:	4614      	mov	r4, r2
 800311e:	d50e      	bpl.n	800313e <_svfiprintf_r+0x32>
 8003120:	690b      	ldr	r3, [r1, #16]
 8003122:	b963      	cbnz	r3, 800313e <_svfiprintf_r+0x32>
 8003124:	2140      	movs	r1, #64	; 0x40
 8003126:	f000 fb19 	bl	800375c <_malloc_r>
 800312a:	6028      	str	r0, [r5, #0]
 800312c:	6128      	str	r0, [r5, #16]
 800312e:	b920      	cbnz	r0, 800313a <_svfiprintf_r+0x2e>
 8003130:	230c      	movs	r3, #12
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	f04f 30ff 	mov.w	r0, #4294967295
 8003138:	e0d1      	b.n	80032de <_svfiprintf_r+0x1d2>
 800313a:	2340      	movs	r3, #64	; 0x40
 800313c:	616b      	str	r3, [r5, #20]
 800313e:	2300      	movs	r3, #0
 8003140:	9309      	str	r3, [sp, #36]	; 0x24
 8003142:	2320      	movs	r3, #32
 8003144:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003148:	f8cd 800c 	str.w	r8, [sp, #12]
 800314c:	2330      	movs	r3, #48	; 0x30
 800314e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80032f8 <_svfiprintf_r+0x1ec>
 8003152:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003156:	f04f 0901 	mov.w	r9, #1
 800315a:	4623      	mov	r3, r4
 800315c:	469a      	mov	sl, r3
 800315e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003162:	b10a      	cbz	r2, 8003168 <_svfiprintf_r+0x5c>
 8003164:	2a25      	cmp	r2, #37	; 0x25
 8003166:	d1f9      	bne.n	800315c <_svfiprintf_r+0x50>
 8003168:	ebba 0b04 	subs.w	fp, sl, r4
 800316c:	d00b      	beq.n	8003186 <_svfiprintf_r+0x7a>
 800316e:	465b      	mov	r3, fp
 8003170:	4622      	mov	r2, r4
 8003172:	4629      	mov	r1, r5
 8003174:	4638      	mov	r0, r7
 8003176:	f7ff ff6d 	bl	8003054 <__ssputs_r>
 800317a:	3001      	adds	r0, #1
 800317c:	f000 80aa 	beq.w	80032d4 <_svfiprintf_r+0x1c8>
 8003180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003182:	445a      	add	r2, fp
 8003184:	9209      	str	r2, [sp, #36]	; 0x24
 8003186:	f89a 3000 	ldrb.w	r3, [sl]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 80a2 	beq.w	80032d4 <_svfiprintf_r+0x1c8>
 8003190:	2300      	movs	r3, #0
 8003192:	f04f 32ff 	mov.w	r2, #4294967295
 8003196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800319a:	f10a 0a01 	add.w	sl, sl, #1
 800319e:	9304      	str	r3, [sp, #16]
 80031a0:	9307      	str	r3, [sp, #28]
 80031a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031a6:	931a      	str	r3, [sp, #104]	; 0x68
 80031a8:	4654      	mov	r4, sl
 80031aa:	2205      	movs	r2, #5
 80031ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031b0:	4851      	ldr	r0, [pc, #324]	; (80032f8 <_svfiprintf_r+0x1ec>)
 80031b2:	f7fd f81d 	bl	80001f0 <memchr>
 80031b6:	9a04      	ldr	r2, [sp, #16]
 80031b8:	b9d8      	cbnz	r0, 80031f2 <_svfiprintf_r+0xe6>
 80031ba:	06d0      	lsls	r0, r2, #27
 80031bc:	bf44      	itt	mi
 80031be:	2320      	movmi	r3, #32
 80031c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031c4:	0711      	lsls	r1, r2, #28
 80031c6:	bf44      	itt	mi
 80031c8:	232b      	movmi	r3, #43	; 0x2b
 80031ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031ce:	f89a 3000 	ldrb.w	r3, [sl]
 80031d2:	2b2a      	cmp	r3, #42	; 0x2a
 80031d4:	d015      	beq.n	8003202 <_svfiprintf_r+0xf6>
 80031d6:	9a07      	ldr	r2, [sp, #28]
 80031d8:	4654      	mov	r4, sl
 80031da:	2000      	movs	r0, #0
 80031dc:	f04f 0c0a 	mov.w	ip, #10
 80031e0:	4621      	mov	r1, r4
 80031e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031e6:	3b30      	subs	r3, #48	; 0x30
 80031e8:	2b09      	cmp	r3, #9
 80031ea:	d94e      	bls.n	800328a <_svfiprintf_r+0x17e>
 80031ec:	b1b0      	cbz	r0, 800321c <_svfiprintf_r+0x110>
 80031ee:	9207      	str	r2, [sp, #28]
 80031f0:	e014      	b.n	800321c <_svfiprintf_r+0x110>
 80031f2:	eba0 0308 	sub.w	r3, r0, r8
 80031f6:	fa09 f303 	lsl.w	r3, r9, r3
 80031fa:	4313      	orrs	r3, r2
 80031fc:	9304      	str	r3, [sp, #16]
 80031fe:	46a2      	mov	sl, r4
 8003200:	e7d2      	b.n	80031a8 <_svfiprintf_r+0x9c>
 8003202:	9b03      	ldr	r3, [sp, #12]
 8003204:	1d19      	adds	r1, r3, #4
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	9103      	str	r1, [sp, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	bfbb      	ittet	lt
 800320e:	425b      	neglt	r3, r3
 8003210:	f042 0202 	orrlt.w	r2, r2, #2
 8003214:	9307      	strge	r3, [sp, #28]
 8003216:	9307      	strlt	r3, [sp, #28]
 8003218:	bfb8      	it	lt
 800321a:	9204      	strlt	r2, [sp, #16]
 800321c:	7823      	ldrb	r3, [r4, #0]
 800321e:	2b2e      	cmp	r3, #46	; 0x2e
 8003220:	d10c      	bne.n	800323c <_svfiprintf_r+0x130>
 8003222:	7863      	ldrb	r3, [r4, #1]
 8003224:	2b2a      	cmp	r3, #42	; 0x2a
 8003226:	d135      	bne.n	8003294 <_svfiprintf_r+0x188>
 8003228:	9b03      	ldr	r3, [sp, #12]
 800322a:	1d1a      	adds	r2, r3, #4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	9203      	str	r2, [sp, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	bfb8      	it	lt
 8003234:	f04f 33ff 	movlt.w	r3, #4294967295
 8003238:	3402      	adds	r4, #2
 800323a:	9305      	str	r3, [sp, #20]
 800323c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003308 <_svfiprintf_r+0x1fc>
 8003240:	7821      	ldrb	r1, [r4, #0]
 8003242:	2203      	movs	r2, #3
 8003244:	4650      	mov	r0, sl
 8003246:	f7fc ffd3 	bl	80001f0 <memchr>
 800324a:	b140      	cbz	r0, 800325e <_svfiprintf_r+0x152>
 800324c:	2340      	movs	r3, #64	; 0x40
 800324e:	eba0 000a 	sub.w	r0, r0, sl
 8003252:	fa03 f000 	lsl.w	r0, r3, r0
 8003256:	9b04      	ldr	r3, [sp, #16]
 8003258:	4303      	orrs	r3, r0
 800325a:	3401      	adds	r4, #1
 800325c:	9304      	str	r3, [sp, #16]
 800325e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003262:	4826      	ldr	r0, [pc, #152]	; (80032fc <_svfiprintf_r+0x1f0>)
 8003264:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003268:	2206      	movs	r2, #6
 800326a:	f7fc ffc1 	bl	80001f0 <memchr>
 800326e:	2800      	cmp	r0, #0
 8003270:	d038      	beq.n	80032e4 <_svfiprintf_r+0x1d8>
 8003272:	4b23      	ldr	r3, [pc, #140]	; (8003300 <_svfiprintf_r+0x1f4>)
 8003274:	bb1b      	cbnz	r3, 80032be <_svfiprintf_r+0x1b2>
 8003276:	9b03      	ldr	r3, [sp, #12]
 8003278:	3307      	adds	r3, #7
 800327a:	f023 0307 	bic.w	r3, r3, #7
 800327e:	3308      	adds	r3, #8
 8003280:	9303      	str	r3, [sp, #12]
 8003282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003284:	4433      	add	r3, r6
 8003286:	9309      	str	r3, [sp, #36]	; 0x24
 8003288:	e767      	b.n	800315a <_svfiprintf_r+0x4e>
 800328a:	fb0c 3202 	mla	r2, ip, r2, r3
 800328e:	460c      	mov	r4, r1
 8003290:	2001      	movs	r0, #1
 8003292:	e7a5      	b.n	80031e0 <_svfiprintf_r+0xd4>
 8003294:	2300      	movs	r3, #0
 8003296:	3401      	adds	r4, #1
 8003298:	9305      	str	r3, [sp, #20]
 800329a:	4619      	mov	r1, r3
 800329c:	f04f 0c0a 	mov.w	ip, #10
 80032a0:	4620      	mov	r0, r4
 80032a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032a6:	3a30      	subs	r2, #48	; 0x30
 80032a8:	2a09      	cmp	r2, #9
 80032aa:	d903      	bls.n	80032b4 <_svfiprintf_r+0x1a8>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0c5      	beq.n	800323c <_svfiprintf_r+0x130>
 80032b0:	9105      	str	r1, [sp, #20]
 80032b2:	e7c3      	b.n	800323c <_svfiprintf_r+0x130>
 80032b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80032b8:	4604      	mov	r4, r0
 80032ba:	2301      	movs	r3, #1
 80032bc:	e7f0      	b.n	80032a0 <_svfiprintf_r+0x194>
 80032be:	ab03      	add	r3, sp, #12
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	462a      	mov	r2, r5
 80032c4:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <_svfiprintf_r+0x1f8>)
 80032c6:	a904      	add	r1, sp, #16
 80032c8:	4638      	mov	r0, r7
 80032ca:	f3af 8000 	nop.w
 80032ce:	1c42      	adds	r2, r0, #1
 80032d0:	4606      	mov	r6, r0
 80032d2:	d1d6      	bne.n	8003282 <_svfiprintf_r+0x176>
 80032d4:	89ab      	ldrh	r3, [r5, #12]
 80032d6:	065b      	lsls	r3, r3, #25
 80032d8:	f53f af2c 	bmi.w	8003134 <_svfiprintf_r+0x28>
 80032dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032de:	b01d      	add	sp, #116	; 0x74
 80032e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032e4:	ab03      	add	r3, sp, #12
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	462a      	mov	r2, r5
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <_svfiprintf_r+0x1f8>)
 80032ec:	a904      	add	r1, sp, #16
 80032ee:	4638      	mov	r0, r7
 80032f0:	f000 f87a 	bl	80033e8 <_printf_i>
 80032f4:	e7eb      	b.n	80032ce <_svfiprintf_r+0x1c2>
 80032f6:	bf00      	nop
 80032f8:	08003a08 	.word	0x08003a08
 80032fc:	08003a12 	.word	0x08003a12
 8003300:	00000000 	.word	0x00000000
 8003304:	08003055 	.word	0x08003055
 8003308:	08003a0e 	.word	0x08003a0e

0800330c <_printf_common>:
 800330c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003310:	4616      	mov	r6, r2
 8003312:	4699      	mov	r9, r3
 8003314:	688a      	ldr	r2, [r1, #8]
 8003316:	690b      	ldr	r3, [r1, #16]
 8003318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800331c:	4293      	cmp	r3, r2
 800331e:	bfb8      	it	lt
 8003320:	4613      	movlt	r3, r2
 8003322:	6033      	str	r3, [r6, #0]
 8003324:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003328:	4607      	mov	r7, r0
 800332a:	460c      	mov	r4, r1
 800332c:	b10a      	cbz	r2, 8003332 <_printf_common+0x26>
 800332e:	3301      	adds	r3, #1
 8003330:	6033      	str	r3, [r6, #0]
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	0699      	lsls	r1, r3, #26
 8003336:	bf42      	ittt	mi
 8003338:	6833      	ldrmi	r3, [r6, #0]
 800333a:	3302      	addmi	r3, #2
 800333c:	6033      	strmi	r3, [r6, #0]
 800333e:	6825      	ldr	r5, [r4, #0]
 8003340:	f015 0506 	ands.w	r5, r5, #6
 8003344:	d106      	bne.n	8003354 <_printf_common+0x48>
 8003346:	f104 0a19 	add.w	sl, r4, #25
 800334a:	68e3      	ldr	r3, [r4, #12]
 800334c:	6832      	ldr	r2, [r6, #0]
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	42ab      	cmp	r3, r5
 8003352:	dc26      	bgt.n	80033a2 <_printf_common+0x96>
 8003354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003358:	1e13      	subs	r3, r2, #0
 800335a:	6822      	ldr	r2, [r4, #0]
 800335c:	bf18      	it	ne
 800335e:	2301      	movne	r3, #1
 8003360:	0692      	lsls	r2, r2, #26
 8003362:	d42b      	bmi.n	80033bc <_printf_common+0xb0>
 8003364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003368:	4649      	mov	r1, r9
 800336a:	4638      	mov	r0, r7
 800336c:	47c0      	blx	r8
 800336e:	3001      	adds	r0, #1
 8003370:	d01e      	beq.n	80033b0 <_printf_common+0xa4>
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	68e5      	ldr	r5, [r4, #12]
 8003376:	6832      	ldr	r2, [r6, #0]
 8003378:	f003 0306 	and.w	r3, r3, #6
 800337c:	2b04      	cmp	r3, #4
 800337e:	bf08      	it	eq
 8003380:	1aad      	subeq	r5, r5, r2
 8003382:	68a3      	ldr	r3, [r4, #8]
 8003384:	6922      	ldr	r2, [r4, #16]
 8003386:	bf0c      	ite	eq
 8003388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800338c:	2500      	movne	r5, #0
 800338e:	4293      	cmp	r3, r2
 8003390:	bfc4      	itt	gt
 8003392:	1a9b      	subgt	r3, r3, r2
 8003394:	18ed      	addgt	r5, r5, r3
 8003396:	2600      	movs	r6, #0
 8003398:	341a      	adds	r4, #26
 800339a:	42b5      	cmp	r5, r6
 800339c:	d11a      	bne.n	80033d4 <_printf_common+0xc8>
 800339e:	2000      	movs	r0, #0
 80033a0:	e008      	b.n	80033b4 <_printf_common+0xa8>
 80033a2:	2301      	movs	r3, #1
 80033a4:	4652      	mov	r2, sl
 80033a6:	4649      	mov	r1, r9
 80033a8:	4638      	mov	r0, r7
 80033aa:	47c0      	blx	r8
 80033ac:	3001      	adds	r0, #1
 80033ae:	d103      	bne.n	80033b8 <_printf_common+0xac>
 80033b0:	f04f 30ff 	mov.w	r0, #4294967295
 80033b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033b8:	3501      	adds	r5, #1
 80033ba:	e7c6      	b.n	800334a <_printf_common+0x3e>
 80033bc:	18e1      	adds	r1, r4, r3
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	2030      	movs	r0, #48	; 0x30
 80033c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033c6:	4422      	add	r2, r4
 80033c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033d0:	3302      	adds	r3, #2
 80033d2:	e7c7      	b.n	8003364 <_printf_common+0x58>
 80033d4:	2301      	movs	r3, #1
 80033d6:	4622      	mov	r2, r4
 80033d8:	4649      	mov	r1, r9
 80033da:	4638      	mov	r0, r7
 80033dc:	47c0      	blx	r8
 80033de:	3001      	adds	r0, #1
 80033e0:	d0e6      	beq.n	80033b0 <_printf_common+0xa4>
 80033e2:	3601      	adds	r6, #1
 80033e4:	e7d9      	b.n	800339a <_printf_common+0x8e>
	...

080033e8 <_printf_i>:
 80033e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033ec:	7e0f      	ldrb	r7, [r1, #24]
 80033ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033f0:	2f78      	cmp	r7, #120	; 0x78
 80033f2:	4691      	mov	r9, r2
 80033f4:	4680      	mov	r8, r0
 80033f6:	460c      	mov	r4, r1
 80033f8:	469a      	mov	sl, r3
 80033fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033fe:	d807      	bhi.n	8003410 <_printf_i+0x28>
 8003400:	2f62      	cmp	r7, #98	; 0x62
 8003402:	d80a      	bhi.n	800341a <_printf_i+0x32>
 8003404:	2f00      	cmp	r7, #0
 8003406:	f000 80d8 	beq.w	80035ba <_printf_i+0x1d2>
 800340a:	2f58      	cmp	r7, #88	; 0x58
 800340c:	f000 80a3 	beq.w	8003556 <_printf_i+0x16e>
 8003410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003414:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003418:	e03a      	b.n	8003490 <_printf_i+0xa8>
 800341a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800341e:	2b15      	cmp	r3, #21
 8003420:	d8f6      	bhi.n	8003410 <_printf_i+0x28>
 8003422:	a101      	add	r1, pc, #4	; (adr r1, 8003428 <_printf_i+0x40>)
 8003424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003428:	08003481 	.word	0x08003481
 800342c:	08003495 	.word	0x08003495
 8003430:	08003411 	.word	0x08003411
 8003434:	08003411 	.word	0x08003411
 8003438:	08003411 	.word	0x08003411
 800343c:	08003411 	.word	0x08003411
 8003440:	08003495 	.word	0x08003495
 8003444:	08003411 	.word	0x08003411
 8003448:	08003411 	.word	0x08003411
 800344c:	08003411 	.word	0x08003411
 8003450:	08003411 	.word	0x08003411
 8003454:	080035a1 	.word	0x080035a1
 8003458:	080034c5 	.word	0x080034c5
 800345c:	08003583 	.word	0x08003583
 8003460:	08003411 	.word	0x08003411
 8003464:	08003411 	.word	0x08003411
 8003468:	080035c3 	.word	0x080035c3
 800346c:	08003411 	.word	0x08003411
 8003470:	080034c5 	.word	0x080034c5
 8003474:	08003411 	.word	0x08003411
 8003478:	08003411 	.word	0x08003411
 800347c:	0800358b 	.word	0x0800358b
 8003480:	682b      	ldr	r3, [r5, #0]
 8003482:	1d1a      	adds	r2, r3, #4
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	602a      	str	r2, [r5, #0]
 8003488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800348c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003490:	2301      	movs	r3, #1
 8003492:	e0a3      	b.n	80035dc <_printf_i+0x1f4>
 8003494:	6820      	ldr	r0, [r4, #0]
 8003496:	6829      	ldr	r1, [r5, #0]
 8003498:	0606      	lsls	r6, r0, #24
 800349a:	f101 0304 	add.w	r3, r1, #4
 800349e:	d50a      	bpl.n	80034b6 <_printf_i+0xce>
 80034a0:	680e      	ldr	r6, [r1, #0]
 80034a2:	602b      	str	r3, [r5, #0]
 80034a4:	2e00      	cmp	r6, #0
 80034a6:	da03      	bge.n	80034b0 <_printf_i+0xc8>
 80034a8:	232d      	movs	r3, #45	; 0x2d
 80034aa:	4276      	negs	r6, r6
 80034ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034b0:	485e      	ldr	r0, [pc, #376]	; (800362c <_printf_i+0x244>)
 80034b2:	230a      	movs	r3, #10
 80034b4:	e019      	b.n	80034ea <_printf_i+0x102>
 80034b6:	680e      	ldr	r6, [r1, #0]
 80034b8:	602b      	str	r3, [r5, #0]
 80034ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034be:	bf18      	it	ne
 80034c0:	b236      	sxthne	r6, r6
 80034c2:	e7ef      	b.n	80034a4 <_printf_i+0xbc>
 80034c4:	682b      	ldr	r3, [r5, #0]
 80034c6:	6820      	ldr	r0, [r4, #0]
 80034c8:	1d19      	adds	r1, r3, #4
 80034ca:	6029      	str	r1, [r5, #0]
 80034cc:	0601      	lsls	r1, r0, #24
 80034ce:	d501      	bpl.n	80034d4 <_printf_i+0xec>
 80034d0:	681e      	ldr	r6, [r3, #0]
 80034d2:	e002      	b.n	80034da <_printf_i+0xf2>
 80034d4:	0646      	lsls	r6, r0, #25
 80034d6:	d5fb      	bpl.n	80034d0 <_printf_i+0xe8>
 80034d8:	881e      	ldrh	r6, [r3, #0]
 80034da:	4854      	ldr	r0, [pc, #336]	; (800362c <_printf_i+0x244>)
 80034dc:	2f6f      	cmp	r7, #111	; 0x6f
 80034de:	bf0c      	ite	eq
 80034e0:	2308      	moveq	r3, #8
 80034e2:	230a      	movne	r3, #10
 80034e4:	2100      	movs	r1, #0
 80034e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034ea:	6865      	ldr	r5, [r4, #4]
 80034ec:	60a5      	str	r5, [r4, #8]
 80034ee:	2d00      	cmp	r5, #0
 80034f0:	bfa2      	ittt	ge
 80034f2:	6821      	ldrge	r1, [r4, #0]
 80034f4:	f021 0104 	bicge.w	r1, r1, #4
 80034f8:	6021      	strge	r1, [r4, #0]
 80034fa:	b90e      	cbnz	r6, 8003500 <_printf_i+0x118>
 80034fc:	2d00      	cmp	r5, #0
 80034fe:	d04d      	beq.n	800359c <_printf_i+0x1b4>
 8003500:	4615      	mov	r5, r2
 8003502:	fbb6 f1f3 	udiv	r1, r6, r3
 8003506:	fb03 6711 	mls	r7, r3, r1, r6
 800350a:	5dc7      	ldrb	r7, [r0, r7]
 800350c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003510:	4637      	mov	r7, r6
 8003512:	42bb      	cmp	r3, r7
 8003514:	460e      	mov	r6, r1
 8003516:	d9f4      	bls.n	8003502 <_printf_i+0x11a>
 8003518:	2b08      	cmp	r3, #8
 800351a:	d10b      	bne.n	8003534 <_printf_i+0x14c>
 800351c:	6823      	ldr	r3, [r4, #0]
 800351e:	07de      	lsls	r6, r3, #31
 8003520:	d508      	bpl.n	8003534 <_printf_i+0x14c>
 8003522:	6923      	ldr	r3, [r4, #16]
 8003524:	6861      	ldr	r1, [r4, #4]
 8003526:	4299      	cmp	r1, r3
 8003528:	bfde      	ittt	le
 800352a:	2330      	movle	r3, #48	; 0x30
 800352c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003530:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003534:	1b52      	subs	r2, r2, r5
 8003536:	6122      	str	r2, [r4, #16]
 8003538:	f8cd a000 	str.w	sl, [sp]
 800353c:	464b      	mov	r3, r9
 800353e:	aa03      	add	r2, sp, #12
 8003540:	4621      	mov	r1, r4
 8003542:	4640      	mov	r0, r8
 8003544:	f7ff fee2 	bl	800330c <_printf_common>
 8003548:	3001      	adds	r0, #1
 800354a:	d14c      	bne.n	80035e6 <_printf_i+0x1fe>
 800354c:	f04f 30ff 	mov.w	r0, #4294967295
 8003550:	b004      	add	sp, #16
 8003552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003556:	4835      	ldr	r0, [pc, #212]	; (800362c <_printf_i+0x244>)
 8003558:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800355c:	6829      	ldr	r1, [r5, #0]
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	f851 6b04 	ldr.w	r6, [r1], #4
 8003564:	6029      	str	r1, [r5, #0]
 8003566:	061d      	lsls	r5, r3, #24
 8003568:	d514      	bpl.n	8003594 <_printf_i+0x1ac>
 800356a:	07df      	lsls	r7, r3, #31
 800356c:	bf44      	itt	mi
 800356e:	f043 0320 	orrmi.w	r3, r3, #32
 8003572:	6023      	strmi	r3, [r4, #0]
 8003574:	b91e      	cbnz	r6, 800357e <_printf_i+0x196>
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	f023 0320 	bic.w	r3, r3, #32
 800357c:	6023      	str	r3, [r4, #0]
 800357e:	2310      	movs	r3, #16
 8003580:	e7b0      	b.n	80034e4 <_printf_i+0xfc>
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	f043 0320 	orr.w	r3, r3, #32
 8003588:	6023      	str	r3, [r4, #0]
 800358a:	2378      	movs	r3, #120	; 0x78
 800358c:	4828      	ldr	r0, [pc, #160]	; (8003630 <_printf_i+0x248>)
 800358e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003592:	e7e3      	b.n	800355c <_printf_i+0x174>
 8003594:	0659      	lsls	r1, r3, #25
 8003596:	bf48      	it	mi
 8003598:	b2b6      	uxthmi	r6, r6
 800359a:	e7e6      	b.n	800356a <_printf_i+0x182>
 800359c:	4615      	mov	r5, r2
 800359e:	e7bb      	b.n	8003518 <_printf_i+0x130>
 80035a0:	682b      	ldr	r3, [r5, #0]
 80035a2:	6826      	ldr	r6, [r4, #0]
 80035a4:	6961      	ldr	r1, [r4, #20]
 80035a6:	1d18      	adds	r0, r3, #4
 80035a8:	6028      	str	r0, [r5, #0]
 80035aa:	0635      	lsls	r5, r6, #24
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	d501      	bpl.n	80035b4 <_printf_i+0x1cc>
 80035b0:	6019      	str	r1, [r3, #0]
 80035b2:	e002      	b.n	80035ba <_printf_i+0x1d2>
 80035b4:	0670      	lsls	r0, r6, #25
 80035b6:	d5fb      	bpl.n	80035b0 <_printf_i+0x1c8>
 80035b8:	8019      	strh	r1, [r3, #0]
 80035ba:	2300      	movs	r3, #0
 80035bc:	6123      	str	r3, [r4, #16]
 80035be:	4615      	mov	r5, r2
 80035c0:	e7ba      	b.n	8003538 <_printf_i+0x150>
 80035c2:	682b      	ldr	r3, [r5, #0]
 80035c4:	1d1a      	adds	r2, r3, #4
 80035c6:	602a      	str	r2, [r5, #0]
 80035c8:	681d      	ldr	r5, [r3, #0]
 80035ca:	6862      	ldr	r2, [r4, #4]
 80035cc:	2100      	movs	r1, #0
 80035ce:	4628      	mov	r0, r5
 80035d0:	f7fc fe0e 	bl	80001f0 <memchr>
 80035d4:	b108      	cbz	r0, 80035da <_printf_i+0x1f2>
 80035d6:	1b40      	subs	r0, r0, r5
 80035d8:	6060      	str	r0, [r4, #4]
 80035da:	6863      	ldr	r3, [r4, #4]
 80035dc:	6123      	str	r3, [r4, #16]
 80035de:	2300      	movs	r3, #0
 80035e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035e4:	e7a8      	b.n	8003538 <_printf_i+0x150>
 80035e6:	6923      	ldr	r3, [r4, #16]
 80035e8:	462a      	mov	r2, r5
 80035ea:	4649      	mov	r1, r9
 80035ec:	4640      	mov	r0, r8
 80035ee:	47d0      	blx	sl
 80035f0:	3001      	adds	r0, #1
 80035f2:	d0ab      	beq.n	800354c <_printf_i+0x164>
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	079b      	lsls	r3, r3, #30
 80035f8:	d413      	bmi.n	8003622 <_printf_i+0x23a>
 80035fa:	68e0      	ldr	r0, [r4, #12]
 80035fc:	9b03      	ldr	r3, [sp, #12]
 80035fe:	4298      	cmp	r0, r3
 8003600:	bfb8      	it	lt
 8003602:	4618      	movlt	r0, r3
 8003604:	e7a4      	b.n	8003550 <_printf_i+0x168>
 8003606:	2301      	movs	r3, #1
 8003608:	4632      	mov	r2, r6
 800360a:	4649      	mov	r1, r9
 800360c:	4640      	mov	r0, r8
 800360e:	47d0      	blx	sl
 8003610:	3001      	adds	r0, #1
 8003612:	d09b      	beq.n	800354c <_printf_i+0x164>
 8003614:	3501      	adds	r5, #1
 8003616:	68e3      	ldr	r3, [r4, #12]
 8003618:	9903      	ldr	r1, [sp, #12]
 800361a:	1a5b      	subs	r3, r3, r1
 800361c:	42ab      	cmp	r3, r5
 800361e:	dcf2      	bgt.n	8003606 <_printf_i+0x21e>
 8003620:	e7eb      	b.n	80035fa <_printf_i+0x212>
 8003622:	2500      	movs	r5, #0
 8003624:	f104 0619 	add.w	r6, r4, #25
 8003628:	e7f5      	b.n	8003616 <_printf_i+0x22e>
 800362a:	bf00      	nop
 800362c:	08003a19 	.word	0x08003a19
 8003630:	08003a2a 	.word	0x08003a2a

08003634 <memcpy>:
 8003634:	440a      	add	r2, r1
 8003636:	4291      	cmp	r1, r2
 8003638:	f100 33ff 	add.w	r3, r0, #4294967295
 800363c:	d100      	bne.n	8003640 <memcpy+0xc>
 800363e:	4770      	bx	lr
 8003640:	b510      	push	{r4, lr}
 8003642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800364a:	4291      	cmp	r1, r2
 800364c:	d1f9      	bne.n	8003642 <memcpy+0xe>
 800364e:	bd10      	pop	{r4, pc}

08003650 <memmove>:
 8003650:	4288      	cmp	r0, r1
 8003652:	b510      	push	{r4, lr}
 8003654:	eb01 0402 	add.w	r4, r1, r2
 8003658:	d902      	bls.n	8003660 <memmove+0x10>
 800365a:	4284      	cmp	r4, r0
 800365c:	4623      	mov	r3, r4
 800365e:	d807      	bhi.n	8003670 <memmove+0x20>
 8003660:	1e43      	subs	r3, r0, #1
 8003662:	42a1      	cmp	r1, r4
 8003664:	d008      	beq.n	8003678 <memmove+0x28>
 8003666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800366a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800366e:	e7f8      	b.n	8003662 <memmove+0x12>
 8003670:	4402      	add	r2, r0
 8003672:	4601      	mov	r1, r0
 8003674:	428a      	cmp	r2, r1
 8003676:	d100      	bne.n	800367a <memmove+0x2a>
 8003678:	bd10      	pop	{r4, pc}
 800367a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800367e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003682:	e7f7      	b.n	8003674 <memmove+0x24>

08003684 <_free_r>:
 8003684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003686:	2900      	cmp	r1, #0
 8003688:	d044      	beq.n	8003714 <_free_r+0x90>
 800368a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800368e:	9001      	str	r0, [sp, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f1a1 0404 	sub.w	r4, r1, #4
 8003696:	bfb8      	it	lt
 8003698:	18e4      	addlt	r4, r4, r3
 800369a:	f000 f913 	bl	80038c4 <__malloc_lock>
 800369e:	4a1e      	ldr	r2, [pc, #120]	; (8003718 <_free_r+0x94>)
 80036a0:	9801      	ldr	r0, [sp, #4]
 80036a2:	6813      	ldr	r3, [r2, #0]
 80036a4:	b933      	cbnz	r3, 80036b4 <_free_r+0x30>
 80036a6:	6063      	str	r3, [r4, #4]
 80036a8:	6014      	str	r4, [r2, #0]
 80036aa:	b003      	add	sp, #12
 80036ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036b0:	f000 b90e 	b.w	80038d0 <__malloc_unlock>
 80036b4:	42a3      	cmp	r3, r4
 80036b6:	d908      	bls.n	80036ca <_free_r+0x46>
 80036b8:	6825      	ldr	r5, [r4, #0]
 80036ba:	1961      	adds	r1, r4, r5
 80036bc:	428b      	cmp	r3, r1
 80036be:	bf01      	itttt	eq
 80036c0:	6819      	ldreq	r1, [r3, #0]
 80036c2:	685b      	ldreq	r3, [r3, #4]
 80036c4:	1949      	addeq	r1, r1, r5
 80036c6:	6021      	streq	r1, [r4, #0]
 80036c8:	e7ed      	b.n	80036a6 <_free_r+0x22>
 80036ca:	461a      	mov	r2, r3
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	b10b      	cbz	r3, 80036d4 <_free_r+0x50>
 80036d0:	42a3      	cmp	r3, r4
 80036d2:	d9fa      	bls.n	80036ca <_free_r+0x46>
 80036d4:	6811      	ldr	r1, [r2, #0]
 80036d6:	1855      	adds	r5, r2, r1
 80036d8:	42a5      	cmp	r5, r4
 80036da:	d10b      	bne.n	80036f4 <_free_r+0x70>
 80036dc:	6824      	ldr	r4, [r4, #0]
 80036de:	4421      	add	r1, r4
 80036e0:	1854      	adds	r4, r2, r1
 80036e2:	42a3      	cmp	r3, r4
 80036e4:	6011      	str	r1, [r2, #0]
 80036e6:	d1e0      	bne.n	80036aa <_free_r+0x26>
 80036e8:	681c      	ldr	r4, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	6053      	str	r3, [r2, #4]
 80036ee:	4421      	add	r1, r4
 80036f0:	6011      	str	r1, [r2, #0]
 80036f2:	e7da      	b.n	80036aa <_free_r+0x26>
 80036f4:	d902      	bls.n	80036fc <_free_r+0x78>
 80036f6:	230c      	movs	r3, #12
 80036f8:	6003      	str	r3, [r0, #0]
 80036fa:	e7d6      	b.n	80036aa <_free_r+0x26>
 80036fc:	6825      	ldr	r5, [r4, #0]
 80036fe:	1961      	adds	r1, r4, r5
 8003700:	428b      	cmp	r3, r1
 8003702:	bf04      	itt	eq
 8003704:	6819      	ldreq	r1, [r3, #0]
 8003706:	685b      	ldreq	r3, [r3, #4]
 8003708:	6063      	str	r3, [r4, #4]
 800370a:	bf04      	itt	eq
 800370c:	1949      	addeq	r1, r1, r5
 800370e:	6021      	streq	r1, [r4, #0]
 8003710:	6054      	str	r4, [r2, #4]
 8003712:	e7ca      	b.n	80036aa <_free_r+0x26>
 8003714:	b003      	add	sp, #12
 8003716:	bd30      	pop	{r4, r5, pc}
 8003718:	200000f8 	.word	0x200000f8

0800371c <sbrk_aligned>:
 800371c:	b570      	push	{r4, r5, r6, lr}
 800371e:	4e0e      	ldr	r6, [pc, #56]	; (8003758 <sbrk_aligned+0x3c>)
 8003720:	460c      	mov	r4, r1
 8003722:	6831      	ldr	r1, [r6, #0]
 8003724:	4605      	mov	r5, r0
 8003726:	b911      	cbnz	r1, 800372e <sbrk_aligned+0x12>
 8003728:	f000 f8bc 	bl	80038a4 <_sbrk_r>
 800372c:	6030      	str	r0, [r6, #0]
 800372e:	4621      	mov	r1, r4
 8003730:	4628      	mov	r0, r5
 8003732:	f000 f8b7 	bl	80038a4 <_sbrk_r>
 8003736:	1c43      	adds	r3, r0, #1
 8003738:	d00a      	beq.n	8003750 <sbrk_aligned+0x34>
 800373a:	1cc4      	adds	r4, r0, #3
 800373c:	f024 0403 	bic.w	r4, r4, #3
 8003740:	42a0      	cmp	r0, r4
 8003742:	d007      	beq.n	8003754 <sbrk_aligned+0x38>
 8003744:	1a21      	subs	r1, r4, r0
 8003746:	4628      	mov	r0, r5
 8003748:	f000 f8ac 	bl	80038a4 <_sbrk_r>
 800374c:	3001      	adds	r0, #1
 800374e:	d101      	bne.n	8003754 <sbrk_aligned+0x38>
 8003750:	f04f 34ff 	mov.w	r4, #4294967295
 8003754:	4620      	mov	r0, r4
 8003756:	bd70      	pop	{r4, r5, r6, pc}
 8003758:	200000fc 	.word	0x200000fc

0800375c <_malloc_r>:
 800375c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003760:	1ccd      	adds	r5, r1, #3
 8003762:	f025 0503 	bic.w	r5, r5, #3
 8003766:	3508      	adds	r5, #8
 8003768:	2d0c      	cmp	r5, #12
 800376a:	bf38      	it	cc
 800376c:	250c      	movcc	r5, #12
 800376e:	2d00      	cmp	r5, #0
 8003770:	4607      	mov	r7, r0
 8003772:	db01      	blt.n	8003778 <_malloc_r+0x1c>
 8003774:	42a9      	cmp	r1, r5
 8003776:	d905      	bls.n	8003784 <_malloc_r+0x28>
 8003778:	230c      	movs	r3, #12
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	2600      	movs	r6, #0
 800377e:	4630      	mov	r0, r6
 8003780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003784:	4e2e      	ldr	r6, [pc, #184]	; (8003840 <_malloc_r+0xe4>)
 8003786:	f000 f89d 	bl	80038c4 <__malloc_lock>
 800378a:	6833      	ldr	r3, [r6, #0]
 800378c:	461c      	mov	r4, r3
 800378e:	bb34      	cbnz	r4, 80037de <_malloc_r+0x82>
 8003790:	4629      	mov	r1, r5
 8003792:	4638      	mov	r0, r7
 8003794:	f7ff ffc2 	bl	800371c <sbrk_aligned>
 8003798:	1c43      	adds	r3, r0, #1
 800379a:	4604      	mov	r4, r0
 800379c:	d14d      	bne.n	800383a <_malloc_r+0xde>
 800379e:	6834      	ldr	r4, [r6, #0]
 80037a0:	4626      	mov	r6, r4
 80037a2:	2e00      	cmp	r6, #0
 80037a4:	d140      	bne.n	8003828 <_malloc_r+0xcc>
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	4631      	mov	r1, r6
 80037aa:	4638      	mov	r0, r7
 80037ac:	eb04 0803 	add.w	r8, r4, r3
 80037b0:	f000 f878 	bl	80038a4 <_sbrk_r>
 80037b4:	4580      	cmp	r8, r0
 80037b6:	d13a      	bne.n	800382e <_malloc_r+0xd2>
 80037b8:	6821      	ldr	r1, [r4, #0]
 80037ba:	3503      	adds	r5, #3
 80037bc:	1a6d      	subs	r5, r5, r1
 80037be:	f025 0503 	bic.w	r5, r5, #3
 80037c2:	3508      	adds	r5, #8
 80037c4:	2d0c      	cmp	r5, #12
 80037c6:	bf38      	it	cc
 80037c8:	250c      	movcc	r5, #12
 80037ca:	4629      	mov	r1, r5
 80037cc:	4638      	mov	r0, r7
 80037ce:	f7ff ffa5 	bl	800371c <sbrk_aligned>
 80037d2:	3001      	adds	r0, #1
 80037d4:	d02b      	beq.n	800382e <_malloc_r+0xd2>
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	442b      	add	r3, r5
 80037da:	6023      	str	r3, [r4, #0]
 80037dc:	e00e      	b.n	80037fc <_malloc_r+0xa0>
 80037de:	6822      	ldr	r2, [r4, #0]
 80037e0:	1b52      	subs	r2, r2, r5
 80037e2:	d41e      	bmi.n	8003822 <_malloc_r+0xc6>
 80037e4:	2a0b      	cmp	r2, #11
 80037e6:	d916      	bls.n	8003816 <_malloc_r+0xba>
 80037e8:	1961      	adds	r1, r4, r5
 80037ea:	42a3      	cmp	r3, r4
 80037ec:	6025      	str	r5, [r4, #0]
 80037ee:	bf18      	it	ne
 80037f0:	6059      	strne	r1, [r3, #4]
 80037f2:	6863      	ldr	r3, [r4, #4]
 80037f4:	bf08      	it	eq
 80037f6:	6031      	streq	r1, [r6, #0]
 80037f8:	5162      	str	r2, [r4, r5]
 80037fa:	604b      	str	r3, [r1, #4]
 80037fc:	4638      	mov	r0, r7
 80037fe:	f104 060b 	add.w	r6, r4, #11
 8003802:	f000 f865 	bl	80038d0 <__malloc_unlock>
 8003806:	f026 0607 	bic.w	r6, r6, #7
 800380a:	1d23      	adds	r3, r4, #4
 800380c:	1af2      	subs	r2, r6, r3
 800380e:	d0b6      	beq.n	800377e <_malloc_r+0x22>
 8003810:	1b9b      	subs	r3, r3, r6
 8003812:	50a3      	str	r3, [r4, r2]
 8003814:	e7b3      	b.n	800377e <_malloc_r+0x22>
 8003816:	6862      	ldr	r2, [r4, #4]
 8003818:	42a3      	cmp	r3, r4
 800381a:	bf0c      	ite	eq
 800381c:	6032      	streq	r2, [r6, #0]
 800381e:	605a      	strne	r2, [r3, #4]
 8003820:	e7ec      	b.n	80037fc <_malloc_r+0xa0>
 8003822:	4623      	mov	r3, r4
 8003824:	6864      	ldr	r4, [r4, #4]
 8003826:	e7b2      	b.n	800378e <_malloc_r+0x32>
 8003828:	4634      	mov	r4, r6
 800382a:	6876      	ldr	r6, [r6, #4]
 800382c:	e7b9      	b.n	80037a2 <_malloc_r+0x46>
 800382e:	230c      	movs	r3, #12
 8003830:	603b      	str	r3, [r7, #0]
 8003832:	4638      	mov	r0, r7
 8003834:	f000 f84c 	bl	80038d0 <__malloc_unlock>
 8003838:	e7a1      	b.n	800377e <_malloc_r+0x22>
 800383a:	6025      	str	r5, [r4, #0]
 800383c:	e7de      	b.n	80037fc <_malloc_r+0xa0>
 800383e:	bf00      	nop
 8003840:	200000f8 	.word	0x200000f8

08003844 <_realloc_r>:
 8003844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003848:	4680      	mov	r8, r0
 800384a:	4614      	mov	r4, r2
 800384c:	460e      	mov	r6, r1
 800384e:	b921      	cbnz	r1, 800385a <_realloc_r+0x16>
 8003850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003854:	4611      	mov	r1, r2
 8003856:	f7ff bf81 	b.w	800375c <_malloc_r>
 800385a:	b92a      	cbnz	r2, 8003868 <_realloc_r+0x24>
 800385c:	f7ff ff12 	bl	8003684 <_free_r>
 8003860:	4625      	mov	r5, r4
 8003862:	4628      	mov	r0, r5
 8003864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003868:	f000 f838 	bl	80038dc <_malloc_usable_size_r>
 800386c:	4284      	cmp	r4, r0
 800386e:	4607      	mov	r7, r0
 8003870:	d802      	bhi.n	8003878 <_realloc_r+0x34>
 8003872:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003876:	d812      	bhi.n	800389e <_realloc_r+0x5a>
 8003878:	4621      	mov	r1, r4
 800387a:	4640      	mov	r0, r8
 800387c:	f7ff ff6e 	bl	800375c <_malloc_r>
 8003880:	4605      	mov	r5, r0
 8003882:	2800      	cmp	r0, #0
 8003884:	d0ed      	beq.n	8003862 <_realloc_r+0x1e>
 8003886:	42bc      	cmp	r4, r7
 8003888:	4622      	mov	r2, r4
 800388a:	4631      	mov	r1, r6
 800388c:	bf28      	it	cs
 800388e:	463a      	movcs	r2, r7
 8003890:	f7ff fed0 	bl	8003634 <memcpy>
 8003894:	4631      	mov	r1, r6
 8003896:	4640      	mov	r0, r8
 8003898:	f7ff fef4 	bl	8003684 <_free_r>
 800389c:	e7e1      	b.n	8003862 <_realloc_r+0x1e>
 800389e:	4635      	mov	r5, r6
 80038a0:	e7df      	b.n	8003862 <_realloc_r+0x1e>
	...

080038a4 <_sbrk_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	4d06      	ldr	r5, [pc, #24]	; (80038c0 <_sbrk_r+0x1c>)
 80038a8:	2300      	movs	r3, #0
 80038aa:	4604      	mov	r4, r0
 80038ac:	4608      	mov	r0, r1
 80038ae:	602b      	str	r3, [r5, #0]
 80038b0:	f7fd f950 	bl	8000b54 <_sbrk>
 80038b4:	1c43      	adds	r3, r0, #1
 80038b6:	d102      	bne.n	80038be <_sbrk_r+0x1a>
 80038b8:	682b      	ldr	r3, [r5, #0]
 80038ba:	b103      	cbz	r3, 80038be <_sbrk_r+0x1a>
 80038bc:	6023      	str	r3, [r4, #0]
 80038be:	bd38      	pop	{r3, r4, r5, pc}
 80038c0:	20000100 	.word	0x20000100

080038c4 <__malloc_lock>:
 80038c4:	4801      	ldr	r0, [pc, #4]	; (80038cc <__malloc_lock+0x8>)
 80038c6:	f000 b811 	b.w	80038ec <__retarget_lock_acquire_recursive>
 80038ca:	bf00      	nop
 80038cc:	20000104 	.word	0x20000104

080038d0 <__malloc_unlock>:
 80038d0:	4801      	ldr	r0, [pc, #4]	; (80038d8 <__malloc_unlock+0x8>)
 80038d2:	f000 b80c 	b.w	80038ee <__retarget_lock_release_recursive>
 80038d6:	bf00      	nop
 80038d8:	20000104 	.word	0x20000104

080038dc <_malloc_usable_size_r>:
 80038dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038e0:	1f18      	subs	r0, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	bfbc      	itt	lt
 80038e6:	580b      	ldrlt	r3, [r1, r0]
 80038e8:	18c0      	addlt	r0, r0, r3
 80038ea:	4770      	bx	lr

080038ec <__retarget_lock_acquire_recursive>:
 80038ec:	4770      	bx	lr

080038ee <__retarget_lock_release_recursive>:
 80038ee:	4770      	bx	lr

080038f0 <_init>:
 80038f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f2:	bf00      	nop
 80038f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f6:	bc08      	pop	{r3}
 80038f8:	469e      	mov	lr, r3
 80038fa:	4770      	bx	lr

080038fc <_fini>:
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	bf00      	nop
 8003900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003902:	bc08      	pop	{r3}
 8003904:	469e      	mov	lr, r3
 8003906:	4770      	bx	lr
